<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niraj Sonawane</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nirajsonawane.github.io/"/>
  <updated>2022-04-27T22:11:15.957Z</updated>
  <id>https://nirajsonawane.github.io/</id>
  
  <author>
    <name>Niraj Sonawane</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot &amp; AWS RDS Part 3- Secrets-Manager</title>
    <link href="https://nirajsonawane.github.io/2022/04/27/Spring-Boot-AWS-RDS-Part-3-Secrets-Manager/"/>
    <id>https://nirajsonawane.github.io/2022/04/27/Spring-Boot-AWS-RDS-Part-3-Secrets-Manager/</id>
    <published>2022-04-27T19:40:50.000Z</published>
    <updated>2022-04-27T22:11:15.957Z</updated>
    
    <content type="html"><![CDATA[<p>The Previous article was about using <a href="https://nirajsonawane.github.io/2022/04/18/Spring-Boot-AWS-RDS/">AWS RDS with Spring Boot</a> &amp; <a href="https://nirajsonawane.github.io/2022/04/24/Spring-Boot-AWS-RDS-Read-Replica-Part-2/">RDS read replicas with Spring Boot</a>. This post is continuation of same topic. In this post i will show you how to access RDS credentials from <a href="https://aws.amazon.com/secrets-manager/" target="_blank" rel="noopener">AWS Secrets Manager</a>.</p><p>Managing the application secrets like database credentials, API keys is always a very critical aspect of application security. Now days almost all the enterprise applications have strict constraints on not allowing storing any secrets in plain text. Secrets are also needed to be rotated in certain time intervals. </p><p><a href="https://aws.amazon.com/secrets-manager/" target="_blank" rel="noopener">AWS Secrets Manager</a> helps us to easily manage and rotate credentials from a central place. Secrets Manager enables us to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Users and applications retrieve secrets with a call to Secrets Manager APIs, eliminating the need to hard code sensitive information in plain text. Secrets Manager has the built-in integration with AWS Services like RDS, Redshift  and DocumentDB.</p><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-aws-rds-secretsmanager" target="_blank" rel="noopener">here</a></strong></p><h4 id="Creating-Secrets-for-RDS-Instance"><a href="#Creating-Secrets-for-RDS-Instance" class="headerlink" title="Creating Secrets for RDS Instance"></a>Creating Secrets for RDS Instance</h4><p>On AWS Console go to AWS Secrets Manager-&gt;Secrets-&gt;Store a new secret and then select Credentials for Amazon RDS database. And create secret as shown. </p><img src="/2022/04/27/Spring-Boot-AWS-RDS-Part-3-Secrets-Manager/secrets-1.png"><img src="/2022/04/27/Spring-Boot-AWS-RDS-Part-3-Secrets-Manager/secrets-2.png"><h4 id="Retrieving-secrets-from-secrets-manager"><a href="#Retrieving-secrets-from-secrets-manager" class="headerlink" title="Retrieving secrets from secrets-manager"></a>Retrieving secrets from secrets-manager</h4><p>Now letâ€™s update our Spring Boot app to retrieve the secrets from secrets-manager. Fortunately Spring &amp; AWS team has created very nice and easy to use <a href="https://github.com/aws/aws-secretsmanager-jdbc" target="_blank" rel="noopener">aws-secretsmanager-jdbc</a> library for this. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-aws-jdbc&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Updating-Data-source-configurations"><a href="#Updating-Data-source-configurations" class="headerlink" title="Updating Data  source configurations"></a>Updating Data  source configurations</h4><p>Now we have to update data source configurations in application.properties so that the application can pick up the database credentials.</p><figure class="highlight yaml"><figcaption><span>configuration without secret manager</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.url=jdbc:postgresql://&lt;database-endpoint-url&gt;:&lt;port&gt;/&lt;database&gt;</span> </span><br><span class="line"><span class="string">spring.datasource.username=admin1</span></span><br><span class="line"><span class="string">spring.datasource.password=Admin123</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>configuration with secret manager</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.url=jdbc-secretsmanager:postgresql://&lt;database-endpoint-url&gt;:&lt;port&gt;/&lt;database&gt;</span> </span><br><span class="line"><span class="string">spring.datasource.username=dev/test-rds-secret-1</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.amazonaws.secretsmanager.sql.AWSSecretsManagerPostgreSQLDriver</span></span><br></pre></td></tr></table></figure><p>Observe that<code>JDBC URL</code> prefix changed to <code>jdbc-secretmanager</code>.<br>secret name is used username.<br>The driver class is from <code>spring-cloud-aws-jdbc</code>.</p><figure class="highlight java"><figcaption><span>Other driver classes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.amazonaws.secretsmanager.sql.AWSSecretsManagerMySQLDriver</span><br><span class="line">com.amazonaws.secretsmanager.sql.AWSSecretsManagerOracleDriver</span><br><span class="line">com.amazonaws.secretsmanager.sql.AWSSecretsManagerMSSQLServerDriver</span><br></pre></td></tr></table></figure><p>Now if you Run the application, Application should connect to database.  </p><p><strong>Note</strong><br>For running the application <strong>locally</strong>, AWS Profile should have been configured correctly &amp; user should access to read secrets from secretsmanager.<br> <figure class="highlight yaml"><figcaption><span>config credentials</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[default]</span></span><br><span class="line"><span class="string">aws_access_key_id</span> <span class="string">=</span> <span class="string">XXXXX</span></span><br><span class="line"><span class="string">aws_secret_access_key</span> <span class="string">=</span> <span class="string">XXXXX</span></span><br></pre></td></tr></table></figure> </p><h4 id="How-the-magic-happens"><a href="#How-the-magic-happens" class="headerlink" title="How the magic happens?"></a>How the magic happens?</h4><p>Magic fo connecting to the database is done by the the JDBC driver class provided by the  <code>aws-secretsmanager-jdbc</code>. When the application request the connection the wrapper class <code>AWSSecretsManagerPostgreSQLDriver</code> makes and API call to Secrets Manager to retrieve the credentials.</p><h4 id="Whats-happens-when-secrets-are-Rotated"><a href="#Whats-happens-when-secrets-are-Rotated" class="headerlink" title="Whats happens when secrets are Rotated?"></a>Whats happens when secrets are Rotated?</h4><p>The <code>aws-secretsmanager-jdbc</code> library does not calls AWS Secrets Manager API every time when connection is requested.<br>As accessing Secrets Manager API is expensive hence it uses cache. The cache policy is Least Recently Used (LRU), so when the cache must discard a secret, it discards the least recently used secret. By default, the cache refreshes secrets every hour. </p><p>When the cached has not expired but the Secrets in AWS Secrets Manager is rotated or changed,<br>Driver uses fallback mechanism. If the database returns an error for the wrong username/password, Driver class makes an fresh API to AWS Secrets Manager to get the new credentials.</p><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-aws-rds-secretsmanager" target="_blank" rel="noopener">here</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The Previous article was about using &lt;a href=&quot;https://nirajsonawane.github.io/2022/04/18/Spring-Boot-AWS-RDS/&quot;&gt;AWS RDS with Spring Boot&lt;/
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="AWS" scheme="https://nirajsonawane.github.io/tags/AWS/"/>
    
      <category term="RDS" scheme="https://nirajsonawane.github.io/tags/RDS/"/>
    
      <category term="PostgreSQL" scheme="https://nirajsonawane.github.io/tags/PostgreSQL/"/>
    
      <category term="ReadReplica" scheme="https://nirajsonawane.github.io/tags/ReadReplica/"/>
    
      <category term="SecretsManager" scheme="https://nirajsonawane.github.io/tags/SecretsManager/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot &amp; AWS RDS Part 2 - Read Replicas</title>
    <link href="https://nirajsonawane.github.io/2022/04/24/Spring-Boot-AWS-RDS-Read-Replica-Part-2/"/>
    <id>https://nirajsonawane.github.io/2022/04/24/Spring-Boot-AWS-RDS-Read-Replica-Part-2/</id>
    <published>2022-04-24T10:14:14.000Z</published>
    <updated>2022-04-28T20:10:18.793Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/04/24/Spring-Boot-AWS-RDS-Read-Replica-Part-2/iam.jpg"><p>In <a href="https://nirajsonawane.github.io/2022/04/18/Spring-Boot-AWS-RDS/">Previous post</a> we discuss, How to use spring boot to access AWS RDS service. This post is continuation of same topic and we will explore, How we can configure &amp; use ReadReplicas.</p><h4 id="What-is-Database-Read-Replicas"><a href="#What-is-Database-Read-Replicas" class="headerlink" title="What is Database Read Replicas?"></a>What is Database Read Replicas?</h4><p>In General read replica is a copy of the primary database instance and it automatically reflects changes made in primary database in almost real time. Read Replicas can improve the performance of read-heavy database workloads by offloading read workload from primary instance.</p><h4 id="How-AWS-RDS-read-replica-works"><a href="#How-AWS-RDS-read-replica-works" class="headerlink" title="How AWS RDS read replica works?"></a>How AWS RDS read replica works?</h4><p>Amazon RDS uses the MariaDB, Microsoft SQL Server, MySQL, Oracle, and PostgreSQL DB enginesâ€™ built-in replication functionality to create a read replica. Any Updates made to the primary DB instance are asynchronously copied to the read replica. </p><img src="/2022/04/24/Spring-Boot-AWS-RDS-Read-Replica-Part-2/read-and-standby-replica.png"><p>AWS allows to create read replicas in same availability zone or in different availability zone. It Also allows to create read replicas in different regions. <strong>Creating up to 5 read replicas are allowed.</strong> </p><h4 id="Why-to-use-read-replica"><a href="#Why-to-use-read-replica" class="headerlink" title="Why to use read replica?"></a>Why to use read replica?</h4><ol><li>Read replicas can significantly improve the performance by redirecting read traffic to one or more read replicas.</li><li>Read replicas are Ideal for implementing Business reporting or data warehousing work loads, Without impacting normal business flows.</li><li><p>In some cases read replica can be used for implementing disaster recovery. Read replicas can be promoted as primary database instance. </p><h4 id="How-to-create-read-replicas-in-AWS-Console"><a href="#How-to-create-read-replicas-in-AWS-Console" class="headerlink" title="How to create read replicas in AWS Console?"></a>How to create read replicas in AWS Console?</h4><p>While creating a read replicas we need to specify an existing DB instance as the source. Then Amazon RDS takes a snapshot of the source instance and creates a read-only instance from the snapshot. The read replica operates as a DB instance that allows only read-only connections.<br>Applications connect to a read replica the same way they do to any DB instance. </p></li></ol><p>On AWS Console choose the DB instance that you want to use as the source for a read replica.<br>Then Go to action, choose Create read replica. Then Follow the same steps explained In <a href="https://nirajsonawane.github.io/2022/04/18/Spring-Boot-AWS-RDS/">Previous post</a> </p><p>All the data from the main table will also be available in replicated instance. We can verify the data by connecting to replicated instance using PGAdmin or any other similar tool.<br><img src="/2022/04/24/Spring-Boot-AWS-RDS-Read-Replica-Part-2/rds.png"><br><img src="/2022/04/24/Spring-Boot-AWS-RDS-Read-Replica-Part-2/admin.png"></p><h4 id="How-to-use-read-replicas-with-Spring-Boot-App"><a href="#How-to-use-read-replicas-with-Spring-Boot-App" class="headerlink" title="How to use read replicas with Spring Boot App"></a>How to use read replicas with Spring Boot App</h4><p>In <a href="https://nirajsonawane.github.io/2022/04/18/Spring-Boot-AWS-RDS/">Previous post</a> we used  <code>spring-boot-starter-data-jpa</code>, To use the full power for read replicas , In this example we will use <strong>Spring Cloud AWS JDBC</strong> as it provides some useful features.</p><ol><li>Spring cloud aws automatically detects the read-replica instance and If the read replica support is enabled, It will automatically send the requests to e replica instance. As an application developer we do not have to configure multiple data sources.    </li><li>Spring cloud aws does the Automatic retry incase of database failure. It attempts to send the same request to different availability zone.</li><li><p>As an application developer, We do not need to worry about how many read replicas are configured.</p><h4 id="Setting-up-Spring-Boot-App"><a href="#Setting-up-Spring-Boot-App" class="headerlink" title="Setting up Spring Boot App"></a>Setting up Spring Boot App</h4><p>Letâ€™s create simple small Spring Boot app that will interact with primary database and read replicas.<br>Apart form other needed dependency, We need to add  <code>spring-cloud-aws-jdbc</code> as dependency</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-aws-jdbc&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-aws-postgresql-read-replica" target="_blank" rel="noopener">here</a></strong></p><h4 id="Configuring-data-source"><a href="#Configuring-data-source" class="headerlink" title="Configuring data source"></a>Configuring data source</h4><p>The data sources can be configured using the Spring Boot configuration files. Because of the dynamic number of data sources inside one application, the Spring Boot properties must be configured for each data source.</p><img src="/2022/04/24/Spring-Boot-AWS-RDS-Read-Replica-Part-2/1.png"><figure class="highlight yaml"><figcaption><span>data source configuration properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cloud.aws.rds.&lt;DB-Instance-ID&gt;.username=admin1</span></span><br><span class="line"><span class="string">cloud.aws.rds.&lt;DB-Instance-ID&gt;.password=Admin123</span></span><br><span class="line"><span class="string">cloud.aws.rds.&lt;DB-Instance-ID&gt;.databaseName=employee</span></span><br></pre></td></tr></table></figure><h4 id="How-to-enable-read-replica"><a href="#How-to-enable-read-replica" class="headerlink" title="How to  enable read-replica"></a>How to  enable read-replica</h4><figure class="highlight yaml"><figcaption><span>enable read replica</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cloud.aws.rds.employee-db.readReplicaSupport=true</span></span><br></pre></td></tr></table></figure><h4 id="How-To-redirect-read-traffic-to-read-replica-instance"><a href="#How-To-redirect-read-traffic-to-read-replica-instance" class="headerlink" title="How To redirect read traffic to read replica instance"></a>How To redirect read traffic to read replica instance</h4><p>For redirecting traffic to replicated instance we just need to use Transactions and set <code>Transactional</code> property  as <code>readOnly = true</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@Service</span></span><br><span class="line"><span class="string">@RequiredArgsConstructor</span></span><br><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">EmployeeService</span> <span class="string">&#123;</span></span><br><span class="line">       </span><br><span class="line">       <span class="string">private</span> <span class="string">final</span> <span class="string">EmployeeRepository</span> <span class="string">repository;</span></span><br><span class="line"></span><br><span class="line">       <span class="string">@Transactional</span></span><br><span class="line">       <span class="string">public</span> <span class="string">void</span> <span class="string">saveEmployeeToDatabase(Employee</span> <span class="string">employee)&#123;</span></span><br><span class="line">           <span class="string">repository.save(employee);</span></span><br><span class="line">       <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">@Transactional(readOnly</span> <span class="string">=</span> <span class="literal">true</span><span class="string">)</span></span><br><span class="line">        <span class="string">public</span> <span class="string">List&lt;Employee&gt;</span> <span class="string">findAll()&#123;</span></span><br><span class="line">            <span class="string">return</span> <span class="string">repository.findAll();</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="Write-work-load-and-replication"><a href="#Write-work-load-and-replication" class="headerlink" title="Write work load and replication"></a>Write work load and replication</h4><p>All Write transactions will be redirected to the primary DB Instance and AWS will handle the replication asynchronously without impacting the performance of primary DB Instance.  </p><h4 id="Points-to-keep-in-mind-before-using-read-replicas"><a href="#Points-to-keep-in-mind-before-using-read-replicas" class="headerlink" title="Points to keep in mind before using read replicas"></a>Points to keep in mind before using read replicas</h4><p>Read-replica feature of RDS can increase throughput and performance but replication is not exactly realtime. There will be some lag in coping with data from primary instance to replicated instance and Read replica might return outdated data in some scenarios.     </p><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-aws-postgresql-read-replica" target="_blank" rel="noopener">here</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2022/04/24/Spring-Boot-AWS-RDS-Read-Replica-Part-2/iam.jpg&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://nirajsonawane.github.io/2022/04/18/Spring-Boo
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="AWS" scheme="https://nirajsonawane.github.io/tags/AWS/"/>
    
      <category term="RDS" scheme="https://nirajsonawane.github.io/tags/RDS/"/>
    
      <category term="PostgreSQL" scheme="https://nirajsonawane.github.io/tags/PostgreSQL/"/>
    
      <category term="ReadReplica" scheme="https://nirajsonawane.github.io/tags/ReadReplica/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot &amp; AWS RDS - Part 1</title>
    <link href="https://nirajsonawane.github.io/2022/04/18/Spring-Boot-AWS-RDS/"/>
    <id>https://nirajsonawane.github.io/2022/04/18/Spring-Boot-AWS-RDS/</id>
    <published>2022-04-18T09:56:34.000Z</published>
    <updated>2022-04-24T18:05:59.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-AWS-RDS"><a href="#What-is-AWS-RDS" class="headerlink" title="What is AWS RDS?"></a>What is AWS RDS?</h3><p>AWS RDS is a collection of managed services that makes it simple to set up, operate, and scale databases in the cloud. AWS RDS provides multiple DB Engines options like MySQL, PostgreSQL,MariaDB, Oracle SQL Server.</p><p>As Amazon RDS handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. This brings a lot of convenience to RDS users and provides. RDS also provides other features like replication, enhance availability and reliability.</p><p>In this article we will examine how to use Spring boot to access AWS RDS PostgreSQL. Amazon RDS for PostgreSQL provides access to the capabilities of the familiar PostgreSQL database engine.</p><h3 id="Creating-PostgreSQL-DB-Instance-on-AWS"><a href="#Creating-PostgreSQL-DB-Instance-on-AWS" class="headerlink" title="Creating PostgreSQL DB Instance on AWS"></a>Creating PostgreSQL DB Instance on AWS</h3><p>Go to RDS-&gt;Databases-&gt;Create Database  for creating new database instance. Select PostgreSQL as engine type.<br>For this demo i am using below setting. (These configurations are not recommended for production usage) </p><ol><li>Free tier, </li><li>DB instance identifier : employee-db</li><li>Credential: Master username</li><li>VPC : Default </li><li>Public Access:True</li><li>Security Group:Default</li><li>Initial database name:employee</li></ol><img src="/2022/04/18/Spring-Boot-AWS-RDS/1.png"><img src="/2022/04/18/Spring-Boot-AWS-RDS/2.png"><img src="/2022/04/18/Spring-Boot-AWS-RDS/3.png"><p><strong>Note</strong><br>Only specifying Public Access:True for your Databases might not work. The Security group should allow Inbound traffic from your IP address or All IP address.<br><img src="/2022/04/18/Spring-Boot-AWS-RDS/7.png"> </p><p>Onces the database is ready, Note the <strong>Endpoint url</strong>   which we will use as <code>spring.datasource.url</code><br><img src="/2022/04/18/Spring-Boot-AWS-RDS/5.png"></p><h3 id="Setting-up-Spring-Boot-Project"><a href="#Setting-up-Spring-Boot-Project" class="headerlink" title="Setting up Spring Boot Project"></a>Setting up Spring Boot Project</h3><p>Letâ€™s create simple small Spring Boot app that will interact with RDS. </p><p>We do not need any AWS specific dependancy, Only JPA,spring-web &amp; postgresql dependancy are needed.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.postgresql&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;postgresql&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight yaml"><figcaption><span>Data source configurations</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.url=jdbc:postgresql://&lt;database-endpoint-url&gt;:&lt;port&gt;/&lt;database&gt;</span> </span><br><span class="line"><span class="string">spring.datasource.username=admin1</span></span><br><span class="line"><span class="string">spring.datasource.password=Admin123</span></span><br><span class="line"><span class="string">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect</span></span><br><span class="line"><span class="string">spring.jpa.hibernate.ddl-auto=update</span></span><br><span class="line"><span class="string">spring.jpa.hibernate.show-sql=true</span></span><br></pre></td></tr></table></figure><p>Onces the database connection is done, We can simply use the JAP Repository to interact with database.</p><figure class="highlight java"><figcaption><span>Controller</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/employee"</span>)</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EmployeeRepository repository;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">createEmployee</span><span class="params">(@RequestBody CreateEmployeeRequest request)</span> </span>&#123;</span><br><span class="line">        repository.save(<span class="keyword">new</span> Employee(request.getId(), request.getFirstName(), request.getLastName()));</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity</span><br><span class="line">                .status(HttpStatus.CREATED)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Entity And Repository</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> UUID id;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>, <span class="title">UUID</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-aws-postgresql" target="_blank" rel="noopener">here</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;What-is-AWS-RDS&quot;&gt;&lt;a href=&quot;#What-is-AWS-RDS&quot; class=&quot;headerlink&quot; title=&quot;What is AWS RDS?&quot;&gt;&lt;/a&gt;What is AWS RDS?&lt;/h3&gt;&lt;p&gt;AWS RDS is a col
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="AWS" scheme="https://nirajsonawane.github.io/tags/AWS/"/>
    
      <category term="RDS" scheme="https://nirajsonawane.github.io/tags/RDS/"/>
    
      <category term="PostgreSQL" scheme="https://nirajsonawane.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot With AWS S3</title>
    <link href="https://nirajsonawane.github.io/2021/05/16/Spring-Boot-with-AWS-S3/"/>
    <id>https://nirajsonawane.github.io/2021/05/16/Spring-Boot-with-AWS-S3/</id>
    <published>2021-05-16T20:17:01.000Z</published>
    <updated>2021-05-16T21:33:39.049Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="https://nirajsonawane.github.io/2021/05/09/Spring-Boot-with-AWS-sqs/">previous post</a> we discuss, How to use spring boot to access AWS SQS service. In this article we will examine how to use Spring boot to access <strong>AWS S3</strong>.</p><p><strong>Spring Cloud</strong> provides convenient way to interact with AWS S3 service. With the help of spring cloud S3 support we can use all well-known Spring Boot features. It also offers multiple useful features compare to SDK provided by AWS.</p><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-s3-poc.git" target="_blank" rel="noopener">here</a></strong></p><h4 id="Using-Spring-cloud"><a href="#Using-Spring-cloud" class="headerlink" title="Using Spring cloud"></a>Using Spring cloud</h4><figure class="highlight yaml"><figcaption><span>To use S3 support we just need to add below dependancy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-aws&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Providing AWS credential and SDK configurations</strong><br><figure class="highlight yaml"><figcaption><span>In order to make calls to the AWS Services the credentials must be configured for the the Amazon SDK. In order to access S3 service we can configure access key and secret key using yaml or properties files</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">document:</span></span><br><span class="line"><span class="attr">  bucket-name:</span> <span class="string">spring-boot-s3-poc</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line"><span class="attr">  aws:</span></span><br><span class="line"><span class="attr">    region:</span></span><br><span class="line"><span class="attr">      static:</span> <span class="string">us-east-1</span></span><br><span class="line"><span class="attr">      auto:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    credentials:</span></span><br><span class="line"><span class="attr">      access-key:</span> <span class="string">XXX</span></span><br><span class="line"><span class="attr">      secret-key:</span> <span class="string">XXXXX</span></span><br></pre></td></tr></table></figure></p><p><strong>Creating AmazonS3 Client bean</strong><br><code>AmazonS3 Client</code> bean can be use to perform different operation on AWS S3 service.<br><figure class="highlight java"><figcaption><span>AmazonS3 Client Configuration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cloud.aws.credentials.access-key&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String awsAccessKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cloud.aws.credentials.secret-key&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String awsSecretKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cloud.aws.region.static&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String region;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AmazonS3 <span class="title">amazonS3Client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AmazonS3ClientBuilder</span><br><span class="line">                .standard()</span><br><span class="line">                .withRegion(region)</span><br><span class="line">                .withCredentials(<span class="keyword">new</span> AWSStaticCredentialsProvider(</span><br><span class="line">                        <span class="keyword">new</span> BasicAWSCredentials(awsAccessKey, awsSecretKey)))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Find-all-objects-in-bucket"><a href="#Find-all-objects-in-bucket" class="headerlink" title="Find all objects in bucket"></a>Find all objects in bucket</h3><figure class="highlight java"><figcaption><span>listObjectsV2 method can be use to get all object keys from the bucket</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllDocuments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> amazonS3.listObjectsV2(bucketName).getObjectSummaries().stream()</span><br><span class="line">                .map(S3ObjectSummary::getKey)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Upload-object-to-S3-bucket"><a href="#Upload-object-to-S3-bucket" class="headerlink" title="Upload object to S3 bucket"></a>Upload object to S3 bucket</h3><p>We can  use <code>putObject</code> method on our AmazonS3 client bean to upload object  in S3 bucket. It provides multiple overloaded methods to upload object as File, String, InputStream etc.<br>lets take example of uploading <code>MultipartFile</code> to S3 bucket. </p><figure class="highlight java"><figcaption><span>Uploading MultipartFile to S3 bucket</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">uploadDocument</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       String tempFileName = UUID.randomUUID() + file.getName();</span><br><span class="line">       File tempFile = <span class="keyword">new</span> File(System.getProperty(<span class="string">"java.io.tmpdir"</span>) + <span class="string">"/"</span> + tempFileName);</span><br><span class="line">       file.transferTo(tempFile); <span class="comment">// Convert multipart file to File</span></span><br><span class="line">       String key UID.randomUUID() + file.getName() <span class="comment">// unique key  for the file</span></span><br><span class="line">       amazonS3.putObject(bucketName, key, tempFile); <span class="comment">// Upload file </span></span><br><span class="line">       tempFile.deleteOnExit(); <span class="comment">//delete temp file </span></span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.created(URI.create(tempFileName)).build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Download-object-from-S3-bucket"><a href="#Download-object-from-S3-bucket" class="headerlink" title="Download object from S3 bucket"></a>Download object from S3 bucket</h3><p>We can  use <code>getObject</code> method on our AmazonS3 client bean to get object from S3 bucket. <code>getObject</code> returns an <code>S3Object</code><br>which can be converted to ByteArrayResource .<br><figure class="highlight java"><figcaption><span>Download object from S3 bucket</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;fileName&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ByteArrayResource&gt; <span class="title">downloadFile</span><span class="params">(@PathVariable String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        S3Object data = amazonS3.getObject(bucketName, fileName); <span class="comment">// fileName is key which is used while uploading the object </span></span><br><span class="line">        S3ObjectInputStream objectContent = data.getObjectContent();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = IOUtils.toByteArray(objectContent);</span><br><span class="line">        ByteArrayResource resource = <span class="keyword">new</span> ByteArrayResource(bytes);</span><br><span class="line">        objectContent.close();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity</span><br><span class="line">                .ok()</span><br><span class="line">                .contentLength(bytes.length)</span><br><span class="line">                .header(<span class="string">"Content-type"</span>, <span class="string">"application/octet-stream"</span>)</span><br><span class="line">                .header(<span class="string">"Content-disposition"</span>, <span class="string">"attachment; filename=\""</span> + fileName + <span class="string">"\""</span>)</span><br><span class="line">                .body(resource);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Deleting-object-from-S3-bucket"><a href="#Deleting-object-from-S3-bucket" class="headerlink" title="Deleting object from S3 bucket"></a>Deleting object from S3 bucket</h3><p>We can  use <code>deleteObject</code> method on our AmazonS3 client bean to delete object from bucket.<br><figure class="highlight java"><figcaption><span>Delete Object</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;fileName&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">deleteDocument</span><span class="params">(@PathVariable String fileName)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Deleting file &#123;&#125;"</span>, fileName); </span><br><span class="line">    amazonS3.deleteObject(bucketName, fileName); <span class="comment">// fileName is key which is used while uploading the object </span></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Creating-presigned-url-for-accessing-objects-for-limited-time"><a href="#Creating-presigned-url-for-accessing-objects-for-limited-time" class="headerlink" title="Creating presigned-url for accessing objects for limited time."></a>Creating presigned-url for accessing objects for limited time.</h3><p>We can  use <code>generatePresignedUrl</code> method on our AmazonS3 client bean to generate PresignedUrl which will be valid till provided time.<br><figure class="highlight java"><figcaption><span>get presignedUrl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/presigned-url/&#123;fileName&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">presignedUrl</span><span class="params">(@PathVariable String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> amazonS3</span><br><span class="line">               .generatePresignedUrl(bucketName, fileName, convertToDateViaInstant(LocalDate.now().plusDays(<span class="number">1</span>)))</span><br><span class="line">               .toString();<span class="comment">// URL will be valid for 24hrs</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>Note:<br>On application startup, you might see exception related to Metadata or RegistryFactoryBean. You need to exclude some auto configuration. You can find more details<br><a href="https://stackoverflow.com/a/67409356/320087" target="_blank" rel="noopener">https://stackoverflow.com/a/67409356/320087</a><br><figure class="highlight yaml"><figcaption><span>exclude autoconfigure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  autoconfigure:</span></span><br><span class="line"><span class="attr">    exclude:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">org.springframework.cloud.aws.autoconfigure.context.ContextInstanceDataAutoConfiguration</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">org.springframework.cloud.aws.autoconfigure.context.ContextStackAutoConfiguration</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">org.springframework.cloud.aws.autoconfigure.context.ContextRegionProviderAutoConfiguration</span></span><br></pre></td></tr></table></figure></p><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-s3-poc.git" target="_blank" rel="noopener">here</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In &lt;a href=&quot;https://nirajsonawane.github.io/2021/05/09/Spring-Boot-with-AWS-sqs/&quot;&gt;previous post&lt;/a&gt; we discuss, How to use spring boot to
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="AWS" scheme="https://nirajsonawane.github.io/tags/AWS/"/>
    
      <category term="S3" scheme="https://nirajsonawane.github.io/tags/S3/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot With AWS SQS</title>
    <link href="https://nirajsonawane.github.io/2021/05/09/Spring-Boot-with-AWS-sqs/"/>
    <id>https://nirajsonawane.github.io/2021/05/09/Spring-Boot-with-AWS-sqs/</id>
    <published>2021-05-09T15:09:52.000Z</published>
    <updated>2021-05-09T17:33:49.970Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Spring Cloud</strong> messaging support provides a convenient way to interact with AWS SQS service, With the help of spring cloud messaging support we can use all well-known Spring Boot features. It also offers multiple useful features compare to SDK provided by AWS.</p><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/aws-sqs-spring-boot-poc.git" target="_blank" rel="noopener">here</a></strong></p><h4 id="Create-a-standard-AWS-SQS-queue"><a href="#Create-a-standard-AWS-SQS-queue" class="headerlink" title="Create a standard AWS SQS queue"></a>Create a standard AWS SQS queue</h4><p>Navigate to aws consol -&gt; Simple queue service -&gt; create queue. Then select standard queue and provide name to queue.Click on create queue.<br><img src="/2021/05/09/Spring-Boot-with-AWS-sqs/1.png"></p><p><strong>Create IAM Role and IAM Group</strong>, Which will have access to our queue. </p><img src="/2021/05/09/Spring-Boot-with-AWS-sqs/3.png"><img src="/2021/05/09/Spring-Boot-with-AWS-sqs/2.png"><h4 id="Using-Spring-cloud-messaging"><a href="#Using-Spring-cloud-messaging" class="headerlink" title="Using Spring cloud messaging"></a>Using Spring cloud messaging</h4><figure class="highlight yaml"><figcaption><span>The Spring Cloud AWS messaging module comes as a standalone module and can be imported with the following dependency</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-aws-messaging&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Providing AWS credential and SDK configurations</strong><br><figure class="highlight yaml"><figcaption><span>In order to make calls to the AWS Services the credentials must be configured for the the Amazon SDK. In order to access SQS service we can configure access key and secret key using yaml or properties files</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line"><span class="attr">  aws:</span></span><br><span class="line"><span class="attr">    region:</span></span><br><span class="line"><span class="attr">      static:</span> <span class="string">us-east-1</span></span><br><span class="line"><span class="attr">      auto:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    credentials:</span></span><br><span class="line"><span class="attr">      access-key:</span> <span class="string">XXXX</span></span><br><span class="line"><span class="attr">      secret-key:</span> <span class="string">XXXX</span></span><br><span class="line"><span class="attr">    end-point:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">https://sqs.us-east-1.amazonaws.com/549485575026/spring-boot-poc</span></span><br></pre></td></tr></table></figure></p><p><strong>Sending message to SQS.</strong></p><p>In order to send messages to SQS queue, Spring boot provides <code>QueueMessagingTemplate</code> which uses <code>AmazonSQSAsync</code><br><figure class="highlight java"><figcaption><span>Configuration for QueueMessagingTemplate</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQSConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cloud.aws.region.static&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String region;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cloud.aws.credentials.access-key&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cloud.aws.credentials.secret-key&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueueMessagingTemplate <span class="title">queueMessagingTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueueMessagingTemplate(amazonSQSAsync());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AmazonSQSAsync <span class="title">amazonSQSAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AmazonSQSAsyncClientBuilder.standard().withRegion(Regions.US_EAST_1)</span><br><span class="line">                .withCredentials(<span class="keyword">new</span> AWSStaticCredentialsProvider(<span class="keyword">new</span> BasicAWSCredentials(accessKey, secretKey)))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>QueueMessagingTemplate</code> Provides a convenient method <code>convertAndSend</code> which can be used to send domain objects as message. <code>QueueMessagingTemplate</code> delegate the conversion process to an instance of the MessageConverter interface. This interface defines a simple contract to convert between Java objects and SQS messages.<br><figure class="highlight java"><figcaption><span>Message Publisher</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Publisher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueueMessagingTemplate queueMessagingTemplate;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;cloud.aws.end-point.uri&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleFixedRateTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Sending Message to SQS "</span>);</span><br><span class="line">        <span class="comment">//queueMessagingTemplate.send(endpoint, MessageBuilder.withPayload("Niraj").build());</span></span><br><span class="line">        queueMessagingTemplate.convertAndSend(endpoint, <span class="keyword">new</span> Pojo(<span class="string">"SomeRandomValue"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   </p><p><strong>Consuming Messages from SQS</strong></p><p>Spring boot provides a convenient Annotation <code>@SqsListener</code>. In below example a queue listener container is started that polls the spring-boot-poc queue. The incoming messages is converted to the type of method argument, in this case <code>Pojo</code>.</p><p>As the <code>deletionPolicy</code> is provided as <code>ON_SUCCESS</code> it means, Message will be Deleted from Queue only when successfully executed by listener method (no exception thrown). We can set the <strong>Global deletion policy</strong>  for all the  queues which are consumed by<br>SqsListener by using property  <code>cloud.aws.sqs.handler.default-deletion-policy=ON_SUCCESS</code><br><figure class="highlight java"><figcaption><span>Message Consumer</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SqsListener</span>(value = <span class="string">"spring-boot-poc"</span>,deletionPolicy = SqsMessageDeletionPolicy.ON_SUCCESS)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(Pojo message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Message from SQS &#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   </p><p>Note:<br>On application startup, you might see exception related to Metadata or RegistryFactoryBean. You need to exclude some auto configuration. You can find more details<br><a href="https://stackoverflow.com/a/67409356/320087" target="_blank" rel="noopener">https://stackoverflow.com/a/67409356/320087</a><br><figure class="highlight yaml"><figcaption><span>exclude autoconfigure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  autoconfigure:</span></span><br><span class="line"><span class="attr">    exclude:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">org.springframework.cloud.aws.autoconfigure.context.ContextInstanceDataAutoConfiguration</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">org.springframework.cloud.aws.autoconfigure.context.ContextStackAutoConfiguration</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">org.springframework.cloud.aws.autoconfigure.context.ContextRegionProviderAutoConfiguration</span></span><br></pre></td></tr></table></figure></p><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/aws-sqs-spring-boot-poc.git" target="_blank" rel="noopener">here</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Spring Cloud&lt;/strong&gt; messaging support provides a convenient way to interact with AWS SQS service, With the help of spring cloud
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="AWS" scheme="https://nirajsonawane.github.io/tags/AWS/"/>
    
      <category term="SQS" scheme="https://nirajsonawane.github.io/tags/SQS/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot With Hibernate Envers</title>
    <link href="https://nirajsonawane.github.io/2021/04/25/spring-boot-with-hibernate-envers/"/>
    <id>https://nirajsonawane.github.io/2021/04/25/spring-boot-with-hibernate-envers/</id>
    <published>2021-04-25T19:30:36.000Z</published>
    <updated>2021-04-26T19:50:42.940Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Hibernate Envers</strong> provides an easy &amp; flexible way to implement database auditing and versioning. Database Auditing in the context of JPA means tracking and logging the changes on persisted entities. The database audit logs are important from compliance perspectives and also provides grate helps to identify how and what data has been changed. </p><p><strong>Hibernate Envers can be integrated very easyly with Spring Boot JPA.</strong> </p><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-hibernate-envers-demo.git" target="_blank" rel="noopener">here</a></strong></p><p>To use Envers in Spring boot application, We need to add below dependency.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;hibernate-envers&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;5.4.30.Final&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></p><p>To Audit changes that are performed on an entity, we need to add <strong>@Audited</strong> annotation on the entity.<br><figure class="highlight java"><figcaption><span>Considering we have a UserDetails entity,for which we want to enable Auditing.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Audited</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In order to log all the changes to entity, Envers needs <strong>REVINFO</strong> and  <strong>Entity_aud table</strong>, In  this case it will be USER_DETAILS_AUD.<br>The  REVINFO table contains revision id and revision timestamp. A row is inserted into this table on each new revision, that is, on each commit of a transaction, which changes audited data.<br><figure class="highlight sql"><figcaption><span>flyway migration scripts for the the audit table and revinfo table will look like below.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> REVINFO (</span><br><span class="line">    REV <span class="built_in">INTEGER</span> <span class="keyword">GENERATED</span> <span class="keyword">BY</span> <span class="keyword">DEFAULT</span> <span class="keyword">AS</span> <span class="keyword">IDENTITY</span>,</span><br><span class="line">    REVTSTMP <span class="built_in">BIGINT</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (REV)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> USER_DETAILS (</span><br><span class="line">    USER_ID <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    FIRST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LAST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> USER_DETAILS_AUD (</span><br><span class="line">    USER_ID <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FIRST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    LAST_NAME <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    REV <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REVTYPE <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (USER_ID, REV)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>Now when we insert,update and delete UserDetails entity, audit log will be saved in USER_DETAILS_AUD table.  </p><figure class="highlight java"><figcaption><span>for below code we should expect 4 rows in USER_DETAILS_AUD table</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dataSetup</span><span class="params">(UserDetailsRepository userRepository)</span> </span>&#123;</span><br><span class="line">    UserDetails userDetails = <span class="keyword">new</span> UserDetails(<span class="number">1</span>, <span class="string">"NIRAJ"</span>, <span class="string">"SONAWANE"</span>);</span><br><span class="line">    userRepository.save(userDetails);  <span class="comment">// Create</span></span><br><span class="line"></span><br><span class="line">    userDetails.setFirstName(<span class="string">"Updated Name"</span>);</span><br><span class="line">    userRepository.save(userDetails); <span class="comment">// Update-1</span></span><br><span class="line"></span><br><span class="line">    userDetails.setLastName(<span class="string">"Updated Last name"</span>); <span class="comment">// Update-2</span></span><br><span class="line">    userRepository.save(userDetails);</span><br><span class="line"></span><br><span class="line">    userRepository.delete(userDetails); <span class="comment">// Delete</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/04/25/spring-boot-with-hibernate-envers/1.png"><p>The <strong>REVTYPE</strong> column value is taken from the <strong>RevisionType</strong> Enum. Which has values<br><strong>0-Add</strong><br><strong>1-Update</strong><br><strong>2-Delete</strong></p><p><strong>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-hibernate-envers-demo.git" target="_blank" rel="noopener">here</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Hibernate Envers&lt;/strong&gt; provides an easy &amp;amp; flexible way to implement database auditing and versioning. Database Auditing in
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="JPA" scheme="https://nirajsonawane.github.io/tags/JPA/"/>
    
      <category term="Hibernate Envers" scheme="https://nirajsonawane.github.io/tags/Hibernate-Envers/"/>
    
  </entry>
  
  <entry>
    <title>Consumer Driven Contract Test Using Spring Cloud Contract</title>
    <link href="https://nirajsonawane.github.io/2021/02/20/Contract-Testing-Using-Spring-Cloud-Contract/"/>
    <id>https://nirajsonawane.github.io/2021/02/20/Contract-Testing-Using-Spring-Cloud-Contract/</id>
    <published>2021-02-20T20:00:29.000Z</published>
    <updated>2021-02-22T06:07:02.695Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/02/20/Contract-Testing-Using-Spring-Cloud-Contract/cdct.jpg"><p><span>Photo by <a href="https://unsplash.com/@beatriz_perez?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Beatriz PÃ©rez Moya</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></span></p><p>This post discusses, What is Consumer Driven Contract test? and How to implement it using Spring Cloud Contract.</p><p>The code for this post is available on Github <a href="https://githÂ§ub.com/nirajsonawane/consumer-driven-contract-testing-demo" target="_blank" rel="noopener">here</a></p><h3 id="Contract-Testing"><a href="#Contract-Testing" class="headerlink" title="Contract Testing"></a>Contract Testing</h3><p>Contract test are set of automated test, That verifies two separate services are adhering to predefine contracts and are compatible with each other.<br>Aim of contract test is to make sure that, Contract are always kept up to date and each service ( Provider &amp; Consumer) can be tested independently.</p><h3 id="Consumer-Driven-Contract-test"><a href="#Consumer-Driven-Contract-test" class="headerlink" title="Consumer Driven Contract test"></a>Consumer Driven Contract test</h3><p>In consumer driven contract testing, Consumers are responsible for providing the contract details. In this strategy consumers of API are at the heart of API design process.In consumer driven API design process providers are forced to complete their consumer obligations. Frameworks like pact and Spring Cloud Contracts provides set of tools to implement Consumer Driven Contract test.</p><h3 id="Spring-Cloud-Contract"><a href="#Spring-Cloud-Contract" class="headerlink" title="Spring Cloud Contract"></a>Spring Cloud Contract</h3><p>Spring Cloud Contract provides set of tool for implementing Consumer Driven Contract test for Spring based applications. It has two major component Contract Verifier for Producers &amp; Stub Runner for consumer</p><h3 id="Sample-application"><a href="#Sample-application" class="headerlink" title="Sample application"></a>Sample application</h3><p>Letâ€™s write some contract test. Assume we got an requirement from <strong>Consumer application Service-A</strong>  for status API for <strong>Provider  application Service-B</strong>, Which will provide Current Status of user.</p><p>In consumer driven contract strategy, as consumer of service, consumers need to define what exactly they want from producer in the form of written contracts. You can provide contract in groovy or yaml format</p><h4 id="Provider-Service-B"><a href="#Provider-Service-B" class="headerlink" title="Provider : Service-B"></a>Provider : Service-B</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.contract.spec.Contract</span><br><span class="line">Contract.make &#123;</span><br><span class="line">    description <span class="string">"should return user status"</span></span><br><span class="line"></span><br><span class="line">    request &#123;</span><br><span class="line">        url <span class="string">"/status"</span></span><br><span class="line">        method GET()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response &#123;</span><br><span class="line">        status OK()</span><br><span class="line">        headers &#123;</span><br><span class="line">            contentType applicationJson()</span><br><span class="line">        &#125;</span><br><span class="line">        body (</span><br><span class="line"><span class="symbol">                id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">                status:</span> <span class="string">"CREATED"</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Implement Contract</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserStatusController</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> userStatusService: UserStatusService) &#123;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/status"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getStatus</span><span class="params">()</span></span>: ResponseEntity&lt;UserStatus&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userStatusService.getUserStatus(<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UserStatus</span></span>(<span class="keyword">val</span> id: <span class="built_in">Int</span>, <span class="keyword">val</span> status: String)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserStatusService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getUserStatus</span><span class="params">(userId:<span class="type">Int</span>)</span></span>:UserStatus&#123;</span><br><span class="line">        <span class="keyword">return</span> UserStatus(<span class="number">1</span>,<span class="string">"ACTIVATED"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>How to verify contracts ?</strong><br><code>spring-cloud-starter-contract-verifier</code> helps us to automatically verify the contracts, Itâ€™s generates the test cases during the build phase and verify the API response against the contract. Add below dependency in pom </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">&lt;artifactId&gt;spring-cloud-starter-contract-verifier&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>To auto-generated tests classes, Add below plugin inside build tag.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;plugin&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;3.0.1&lt;/version&gt;</span></span><br><span class="line">    <span class="string">&lt;extensions&gt;true&lt;/extensions&gt;</span></span><br><span class="line">    <span class="string">&lt;configuration&gt;</span></span><br><span class="line">        <span class="string">&lt;testFramework&gt;JUNIT5&lt;/testFramework&gt;</span></span><br><span class="line">        <span class="string">&lt;baseClassForTests&gt;com.ns.producer.BaseClass&lt;/baseClassForTests&gt;</span></span><br><span class="line">    <span class="string">&lt;/configuration&gt;</span></span><br><span class="line"><span class="string">&lt;/plugin&gt;</span></span><br></pre></td></tr></table></figure></p><p>We also need to provide <strong>BaseClassForTest</strong>, which will be extended by all generated classes. Base class is responsible for providing all needed mocking &amp; spring beans needed for the generated test classes.In out cases this is how base class will look like.</p><figure class="highlight java"><figcaption><span>BaseClass</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserStatusController userStatusController;</span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> UserStatusService userStatusService;</span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mockito.when(userStatusService.getUserStatus(<span class="number">1</span>)).thenReturn(<span class="keyword">new</span> UserStatus(<span class="number">1</span>, <span class="string">"CREATED"</span>));</span><br><span class="line">        RestAssuredMockMvc.standaloneSetup(userStatusController);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now if we run the build, <code>ContractVerifierTest</code> test class will be generated inside /target/generated-test-source/contract  generated class will be look like below </p><figure class="highlight java"><figcaption><span>Generated Test Class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractVerifierTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate_get_status_by_id</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// given:</span></span><br><span class="line">MockMvcRequestSpecification request = given();</span><br><span class="line"><span class="comment">// when:</span></span><br><span class="line">ResponseOptions response = given().spec(request)</span><br><span class="line">.get(<span class="string">"/status"</span>);</span><br><span class="line"><span class="comment">// then:</span></span><br><span class="line">assertThat(response.statusCode()).isEqualTo(<span class="number">200</span>);</span><br><span class="line">assertThat(response.header(<span class="string">"Content-Type"</span>)).matches(<span class="string">"application/json.*"</span>);</span><br><span class="line"><span class="comment">// and:</span></span><br><span class="line">DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());</span><br><span class="line">assertThatJson(parsedJson).field(<span class="string">"['id']"</span>).isEqualTo(<span class="number">1</span>);</span><br><span class="line">assertThatJson(parsedJson).field(<span class="string">"['status']"</span>).isEqualTo(<span class="string">"CREATED"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Consumer-Service-A"><a href="#Consumer-Service-A" class="headerlink" title="Consumer : Service-A"></a>Consumer : Service-A</h4><p>On the consumer side , We can use stub generated by Producer application to test the interaction from consumer to producer.To use stub generated by producer add below dependancy in consumer</p><figure class="highlight yaml"><figcaption><span>pom</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-contract-stub-runner&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>the Unit test to test  interaction with Producer will look like below<br><figure class="highlight java"><figcaption><span>pom</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatusServiceTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    lateinit var underTest: StatusService</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JvmField</span></span><br><span class="line">    <span class="meta">@RegisterExtension</span></span><br><span class="line">    <span class="keyword">final</span> val stubRunner = StubRunnerExtension()</span><br><span class="line">        .downloadStub(<span class="string">"com.ns"</span>, <span class="string">"producer"</span>, <span class="string">"0.0.1-SNAPSHOT"</span>, <span class="string">"stubs"</span>)</span><br><span class="line">        .withPort(<span class="number">8080</span>)</span><br><span class="line">        .stubsMode(StubRunnerProperties.StubsMode.LOCAL)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function">fun <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        val status = underTest.getStatus()</span><br><span class="line">        assertEquals(status, <span class="string">"CREATED"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function">fun <span class="title">getPactStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        val status = underTest.getPactStatus()</span><br><span class="line">        assertEquals(status, <span class="string">"CREATED"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/consumer-driven-contract-testing-demo" target="_blank" rel="noopener">here</a></p><p>Reference <a href="https://docs.spring.io/spring-cloud-contract/docs/current/reference/html/index.html" target="_blank" rel="noopener">Spring Cloud Contract Reference Documentation</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2021/02/20/Contract-Testing-Using-Spring-Cloud-Contract/cdct.jpg&quot;&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@beatriz_perez
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Contract Testing" scheme="https://nirajsonawane.github.io/tags/Contract-Testing/"/>
    
      <category term="Spring Cloud Contract" scheme="https://nirajsonawane.github.io/tags/Spring-Cloud-Contract/"/>
    
      <category term="pact" scheme="https://nirajsonawane.github.io/tags/pact/"/>
    
  </entry>
  
  <entry>
    <title>Monitoring Spring Boot Application with Prometheus and Grafana on Kubernetes</title>
    <link href="https://nirajsonawane.github.io/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/"/>
    <id>https://nirajsonawane.github.io/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/</id>
    <published>2020-05-17T17:37:36.000Z</published>
    <updated>2020-05-17T21:51:20.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/helm.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@kmuza?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Carlos Muza"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Carlos Muza</span></a></p><p>Welcome to the second post on Prometheus &amp; Grafana. In last post <a href="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/" title="Monitoring Spring Boot Application with Prometheus and Grafana">Monitoring Spring Boot Application with Prometheus and Grafana</a> we Integrated <strong>Prometheus</strong> , <strong>Spring Boot</strong> and <strong>Grafana</strong> using docker. </p><p>In this post we will discuss, How to setup <strong>Prometheus</strong> and <strong>Grafana</strong> on <strong>Kubernetes</strong> using <strong>Helm Charts</strong></p><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-prometheus-grafana-kubernetes" target="_blank" rel="noopener">here</a></p><p>If youâ€™re new to Kubernetes &amp; Prometheus I recommend reading the following hands-on guide on Kubernetes.</p><ol><li><a href="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/" title="Deploy React, Spring Boot & MongoDB Fullstack application on Kubernetes">Deploy React, Spring Boot & MongoDB Fullstack application on Kubernetes</a></li><li><a href="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/" title="Monitoring Spring Boot Application with Prometheus and Grafana">Monitoring Spring Boot Application with Prometheus and Grafana</a></li></ol><h4 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h4><p>You need to have <a href="https://kubernetes.io/docs/reference/kubectl/kubectl/" target="_blank" rel="noopener">Kubectl</a>, <a href="https://helm.sh/" target="_blank" rel="noopener">Helm</a>, <a href="https://kubernetes.io/docs/tutorials/hello-minikube/" target="_blank" rel="noopener">Minikube</a> installed on your machine. To Follow along this post, Basic knowledge of Kubernetes is needed.</p><h4 id="Step-1-Deploy-a-Spring-Boot-application-on-Kubernetes-and-expose-actuator-endpoints"><a href="#Step-1-Deploy-a-Spring-Boot-application-on-Kubernetes-and-expose-actuator-endpoints" class="headerlink" title="Step 1 : Deploy a Spring Boot application on Kubernetes and expose actuator endpoints"></a>Step 1 : Deploy a Spring Boot application on Kubernetes and expose actuator endpoints</h4><ol><li>How to deploy Spring boot application on Kubernetes is explained in detail <a href="https://nirajsonawane.github.io/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/">here</a> </li><li>How to expose actuator endpoints for Prometheus is explained <a href="https://nirajsonawane.github.io/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/">here</a>. </li></ol><p>In Kubernetes environment , we can configure <strong>annotations</strong> which will be used by prometheus to scrap data.Below is the complete deployment.yaml file</p><figure class="highlight yaml"><figcaption><span>spring-boot-prometheus-deployment.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">spring-boot-prometheus</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">spring-boot-prometheus</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">spring-boot-prometheus</span></span><br><span class="line"><span class="attr">      annotations:</span></span><br><span class="line">        <span class="string">prometheus.io/scrape:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="string">prometheus.io/port:</span> <span class="string">"8080"</span></span><br><span class="line">        <span class="string">prometheus.io/path:</span> <span class="string">"/actuator/prometheus"</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">spring-boot-prometheus</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">nirajsonawane/spring-boot-prometheus:0.0.1-SNAPSHOT</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          resources:</span></span><br><span class="line"><span class="attr">            limits:</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">294</span><span class="string">Mi</span></span><br></pre></td></tr></table></figure><h4 id="Step-2-Create-separate-namespace-for-Monitoring"><a href="#Step-2-Create-separate-namespace-for-Monitoring" class="headerlink" title="Step 2 : Create separate namespace for Monitoring"></a>Step 2 : Create separate namespace for Monitoring</h4><p>itâ€™s always good idea to keep related things together, We will create separate namespace in Kubernetes for monitoring and will deploy all monitoring related application under that namespace.<br><figure class="highlight yaml"><figcaption><span>namespace.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">monitoring</span></span><br></pre></td></tr></table></figure></p><h4 id="Helm-Chart"><a href="#Helm-Chart" class="headerlink" title="Helm Chart"></a>Helm Chart</h4><p>Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of Kubernetes resources. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.<br>Charts are created as files laid out in a particular directory tree, then they can be packaged into versioned archives to be deployed.</p><h4 id="Step-3-Deploy-Prometheus-using-Helm-Chart"><a href="#Step-3-Deploy-Prometheus-using-Helm-Chart" class="headerlink" title="Step 3: Deploy Prometheus using Helm Chart"></a>Step 3: Deploy Prometheus using Helm Chart</h4><p>With the help of Helm,  We can deploy prometheus using single command.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install prometheus stable/prometheus --namespace monitoring</span><br></pre></td></tr></table></figure><br>This will deploy Prometheus into your cluster in the monitoring namespace and mark the release with the name prometheus.</p><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/prometheus.PNG"><p>letâ€™s check if prometheus is running or not<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n monitoring </span><br></pre></td></tr></table></figure><br><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/prometheus-get.PNG"></p><h4 id="Step-4-Deploy-Grafana-using-Helm-Chart"><a href="#Step-4-Deploy-Grafana-using-Helm-Chart" class="headerlink" title="Step 4: Deploy Grafana using Helm Chart"></a>Step 4: Deploy Grafana using Helm Chart</h4><p>In Previous post we have manually created the data sources. Here we can create the  <strong>config map for Prometheus data source</strong> and   grafana deployment can use these config maps.</p><p>After Grafana Helm chart deployment, it looks for any config maps that contain a grafana_datasource label.</p><figure class="highlight yaml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus-grafana-datasource</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    grafana_datasource:</span> <span class="string">'1'</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">datasource.yaml:</span> <span class="string">|-</span></span><br><span class="line"><span class="attr">    apiVersion:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    datasources:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Prometheus</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">      access:</span> <span class="string">proxy</span></span><br><span class="line"><span class="attr">      orgId:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">http://prometheus-server.monitoring.svc.cluster.local</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>values.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidecar:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">xuxinkun/k8s-sidecar:0.0.7</span></span><br><span class="line"><span class="attr">  imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  datasources:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    label:</span> <span class="string">grafana_datasource</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Config map & Grafana deployment</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f helm/monitoring/grafana/config.yml </span><br><span class="line">helm install grafana stable/grafana -f helm/monitoring/grafana/values.yml --namespace monitoring  </span><br></pre></td></tr></table></figure><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/graphana.PNG"><p>Password protected Grafana instance will be be deployed, To know the password run the below command.<br><figure class="highlight plain"><figcaption><span>print password</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret --namespace monitoring grafana -o jsonpath=&quot;&#123;.data.admin-password&#125;&quot; | base64 --decode ; echo</span><br></pre></td></tr></table></figure><br>Now letâ€™s do port-forward for accessing grafana<br><figure class="highlight plain"><figcaption><span>port-forward deployment</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl --namespace monitoring port-forward grafana-5c6bbf7f4c-n5pqb 3000</span><br></pre></td></tr></table></figure></p><p>Now if you goto <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> grafana interface will be available.<br><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/graphana-web.PNG"></p><p>Now lets add JVM chart which wil be using our Prometheus datasource.<br><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/graphana-JVM.PNG"></p><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-prometheus-grafana-kubernetes" target="_blank" rel="noopener">here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/helm.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color:
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Prometheus" scheme="https://nirajsonawane.github.io/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="https://nirajsonawane.github.io/tags/Grafana/"/>
    
      <category term="kubernetes" scheme="https://nirajsonawane.github.io/tags/kubernetes/"/>
    
      <category term="Helm" scheme="https://nirajsonawane.github.io/tags/Helm/"/>
    
  </entry>
  
  <entry>
    <title>Monitoring Spring Boot Application with Prometheus and Grafana</title>
    <link href="https://nirajsonawane.github.io/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/"/>
    <id>https://nirajsonawane.github.io/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/</id>
    <published>2020-05-03T14:49:18.000Z</published>
    <updated>2020-05-04T20:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/carlos.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@kmuza?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Carlos Muza"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Carlos Muza</span></a></p><p>In this post we will discuss how to integrate <strong>Prometheus</strong> monitoring system with <strong>Spring Boot</strong> and <strong>Grafana</strong>. </p><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-prometheus-grafana-kubernetes" target="_blank" rel="noopener">here</a></p><p>This setup has three major components. </p><h2 id="Spring-Boot-and-Micrometer"><a href="#Spring-Boot-and-Micrometer" class="headerlink" title="Spring Boot and Micrometer"></a>Spring Boot and Micrometer</h2><p>Spring Boot Actuator provides number of features to help us monitor and manage spring boot application. Spring Boot Actuator also provides dependency management and auto-configuration for Micrometer.</p><p><a href="https://micrometer.io/" target="_blank" rel="noopener"><strong>Micrometer</strong></a> is an application metrics facade that supports numerous monitoring systems.<br>To integrate Prometheus with spring boot we just need to add  <code>micrometer-registry-prometheus</code> dependancy in class path.Once spring boot detects this dependancy it will expose <code>/actuator/prometheus</code> endpoint.</p><figure class="highlight xml"><figcaption><span>pom File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> Along with this dependancy we need to set below property.<br> <figure class="highlight xml"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=health,info,metrics,prometheus</span><br></pre></td></tr></table></figure></p><p>Now if we run the application and check <a href="http://localhost:8080/actuator/prometheus" target="_blank" rel="noopener">http://localhost:8080/actuator/prometheus</a></p><img src="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/prometheus.PNG"><h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><p><a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a> is an open-source monitoring and alerting toolkit originally built at SoundCloud.<br>Prometheus does one thing and it does it well. It has a simple yet powerful data model and a query language that lets you analyse how your applications and infrastructure are performing. </p><p>Prometheus has a <strong>data scraper</strong> that pulls metrics data over HTTP periodically at a configured interval. It stores metric data in <strong>A time-series Database</strong>. It has simple user interface that can be used to run query and visualize data. It also has powerful <strong>Altering system.</strong></p><p>letâ€™s try to run Prometheus on docker.<br>We need to configure  <code>Prometheus</code> to scrape our spring boot application.<br><figure class="highlight yml"><figcaption><span>prometheus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'spring_micrometer'</span></span><br><span class="line"><span class="attr">    metrics_path:</span> <span class="string">'/actuator/prometheus'</span></span><br><span class="line"><span class="attr">    scrape_interval:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['YOUR-MACHINE-IP:8080']</span></span><br></pre></td></tr></table></figure></p><p>configuration is very much self explanatory. We have created job â€˜spring_micrometerâ€™ for scraping our spring boot application and provided the endpoint where prometheus can get the data. As we are runing Prometheus from docker in targets we need to provide IP of local machine.</p><p><strong>Run Prometheus on docker</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9090:9090 -v &lt;File path of prometheus.yml&gt;:/etc/prometheus/prometheus.yml prom/prometheus</span><br></pre></td></tr></table></figure></p><p>Now if you goto <a href="http://localhost:9090/targets" target="_blank" rel="noopener">http://localhost:9090/targets</a>  it should show our spring boot application.</p><img src="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/targets.PNG"><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><p><a href="https://grafana.com/" target="_blank" rel="noopener">Grafana</a> is open source visualization and analytics software. It allows you to query, visualize, alert on, and explore your metrics no matter where they are stored. It provides you with tools to turn your time-series database (TSDB) data into beautiful graphs and visualizations.</p><p><strong>Grafana supports querying Prometheus from very initial version</strong></p><p>letâ€™s try to setup grafana using docker. </p><figure class="highlight plain"><figcaption><span>docker run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 grafana/grafana </span><br></pre></td></tr></table></figure><p>Now if you goto <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> grafana interface will be available. Default username password is <strong>admin/admin</strong>.<br>you can add Prometheus data source and dashboard by following below steps.  </p> <video width="700" height="700" controls autoplay><br>  <source src="/asset/add-datasource.webm" type="video/webm"><br>Your browser does not support the video tag.<br></video> <p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-prometheus-grafana-kubernetes" target="_blank" rel="noopener">here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/carlos.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color:black;color:
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Prometheus" scheme="https://nirajsonawane.github.io/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="https://nirajsonawane.github.io/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>Deploy React, Spring Boot &amp; MongoDB Fullstack application on Kubernetes</title>
    <link href="https://nirajsonawane.github.io/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/"/>
    <id>https://nirajsonawane.github.io/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/</id>
    <published>2020-04-25T20:21:19.000Z</published>
    <updated>2020-05-17T21:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/keith-misner-h0Vxgz5tyXA-unsplash.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@keithmisner?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Keith Misner"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Keith Misner</span></a></p><p>In this post we will discuss how to Deploy Full stack application on <strong>Kubernetes</strong>. We will build small Student CRUD application using <strong>React</strong>  as Front end, <strong>Spring Boot</strong> as back end and <strong>MongoDB</strong> as persistance layer and we also configure <strong>PersistentVolumeClaim</strong>.</p><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/kubernetes-full-stack-example.git" target="_blank" rel="noopener">here</a></p><h4 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h4><p>To Follow along this post, You need to have <a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">minikube</a> and <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" target="_blank" rel="noopener">kubectl</a> installed on your system. Basic knowledge of Docker,Kubernetes &amp; Spring Boot is needed. </p><p>The sample application that we will be deploying on Kubernetes allows user to perform CRUD operations and the final deployment structure will be below.<br><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/student-app.jpg"></p><p>letâ€™s start </p><h4 id="Step-1-Deploy-a-React-application-on-Kubernetes"><a href="#Step-1-Deploy-a-React-application-on-Kubernetes" class="headerlink" title="Step 1 : Deploy a React application on Kubernetes"></a>Step 1 : Deploy a React application on Kubernetes</h4><p>The React app is created by <code>create-react-app</code> and then docker image is available on Ducker hub. You can also this image to follow along <code>docker pull nirajsonawane/student-app-client</code></p><p><strong>Deployment configuration</strong><br><figure class="highlight yaml"><figcaption><span>student-app-client-deployment File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">nirajsonawane/student-app-client</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p><strong><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">Deployments</a></strong> in Kubernetes is declarative way of creating and updating pods. In above configurations we created <code>student-app-client</code> deployment indicated by <code>name</code>, with 1 number of replicas. The containers sections provides details about Which &amp; How the  containers should get created. </p><p><strong>Service configuration</strong><br><figure class="highlight yaml"><figcaption><span>student-app-client-service File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-client-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><br><strong><a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Service</a></strong> in Kubernetes is way to expose application running on a set of Pods (Deployments) as network service. The above configurations creates a new Service object named <code>student-app-client-service</code>, which targets TCP port 80 on any Pod with the <code>app=student-app-client label.</code> Kubernetes ServiceTypes allow you to specify what kind of Service you want. The default is ClusterIP. Please Check the documentation for more details.</p><p>letâ€™s deploy it on our local Kubernetes cluster<br><strong>Start minikube</strong> <code>minikube start</code></p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/minikube-start.PNG"><p><strong>Check  minikube status</strong> <code>minikube status</code></p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/minikube-status.PNG"><p><strong>Apply deployment and service for client</strong> <code>kubectl apply -f &lt;file-name.yaml&gt;</code></p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/getAll.PNG"><p><strong>Tip:</strong> If you want to check if client pod is getting correctly deployed and want to access URL, Change the service type to <code>NodePort</code> and then run<br><code>minikube service student-app-client-service</code>  </p><h4 id="Step-2-Deploy-MongoDB-persistance-layer-on-Kubernetes"><a href="#Step-2-Deploy-MongoDB-persistance-layer-on-Kubernetes" class="headerlink" title="Step 2 : Deploy MongoDB persistance layer on Kubernetes"></a>Step 2 : Deploy MongoDB persistance layer on Kubernetes</h4><p>For Managing storage Kubernetes <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">PersistentVolume subsystem</a> provides API which defines <em>how storage is provided</em> and <em>how it is consumed.</em> For this we need to create two kubernetes resources</p><p><strong>A PersistentVolume (PV)</strong> is a piece of storage in the cluster that has been provisioned by an administrator or dynamically provisioned using Storage Classes.<br> lifecycle of PV is independent of any individual Pod that uses the PV. In simple words PV are user-provisioned storage volumes assigned to a Kubernetes cluster.</p><p><strong>A PersistentVolumeClaim (PVC)</strong>  is a request for storage by a user that deployment needs. It is similar to a Pod. Pods consume node resources and PVCs consume PV resources.</p><p>In order to deploy the the database component we need to define below resource configurations :</p><ol><li>PersistentVolumeClaim</li><li>Deployment</li><li>Service</li></ol><p><strong>PersistentVolumeClaim</strong><br><figure class="highlight yaml"><figcaption><span>PersistentVolumeClaim config File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mongo-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">256</span><span class="string">Mi</span></span><br></pre></td></tr></table></figure><br>The access modes are:<br>ReadWriteOnce â€“ the volume can be mounted as read-write by a single node<br>ReadOnlyMany â€“ the volume can be mounted read-only by many nodes<br>ReadWriteMany â€“ the volume can be mounted as read-write by many nodes</p><p><strong>Deployment</strong><br><figure class="highlight yaml"><figcaption><span>Deployment Config File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">          image:</span> <span class="attr">mongo:3.6.17-xenial</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">storage</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/data/db</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">storage</span></span><br><span class="line"><span class="attr">          persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">            claimName:</span> <span class="string">mongo-pvc</span></span><br></pre></td></tr></table></figure><br>Deployment is requesting volume defined by claim Name <code>mongo-pvc</code> </p><p><strong>Service</strong><br><figure class="highlight yaml"><figcaption><span>Service Config File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">27017</span></span><br></pre></td></tr></table></figure></p><p>letâ€™s apply all these new configurations.<br><strong>Apply PersistentVolumeClaim , deployment and service for MongoDB</strong> <code>kubectl apply -f &lt;file-name.yaml&gt;</code><br><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/mongo.PNG"> </p><h4 id="Step-3-Deploy-Spring-Boot-Backend-API-on-Kubernetes"><a href="#Step-3-Deploy-Spring-Boot-Backend-API-on-Kubernetes" class="headerlink" title="Step 3 : Deploy Spring Boot Backend API on Kubernetes"></a>Step 3 : Deploy Spring Boot Backend API on Kubernetes</h4><p>Our Backend api is simple spring boot application and it is using doing CRUD using <code>MongoRepository</code> complete code is available on Github <a href="https://github.com/nirajsonawane/kubernetes-full-stack-example.git" target="_blank" rel="noopener">here</a>  </p><p>Spring boot app is dockerized and docker image is available  docker hub. <code>docker pull nirajsonawane/student-app-api:0.0.1-SNAPSHOT</code><br><strong>Deployment</strong><br><figure class="highlight yaml"><figcaption><span>API Deployment Config File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">nirajsonawane/student-app-api:0.0.1-SNAPSHOT</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">MONGO_URL</span></span><br><span class="line"><span class="attr">              value:</span> <span class="attr">mongodb://mongo:27017/dev</span></span><br></pre></td></tr></table></figure><br>in above yaml file The <code>env:</code> is used to define environment variables for the POD. Our API expects MONGO_URL for configuration of <code>spring.data.mongodb.uri</code><br><figure class="highlight plain"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.data.mongodb.uri=$&#123;MONGO_URL:mongodb://localhost:27017/dev&#125;</span><br></pre></td></tr></table></figure><br>Now letâ€™s talk about MONGO_URL.</p><p>mongodb url is configured like <code>mongodb://someHost:27017/dev</code> so what is <code>mongo</code> in our url?  <code>mongo</code> is name defined in service config file of mongo.<br>Pods within a cluster can talk to each other through the names of the Services exposing them.</p><p><strong>Service</strong><br><figure class="highlight yaml"><figcaption><span>Service Config File for API</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><br><strong>Apply deployment and service for API</strong> <code>kubectl apply -f &lt;file-name.yaml&gt;</code><br><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/api.PNG"></p><h4 id="Step-4-Deploy-Ingress-and-connect-frontend-to-backend"><a href="#Step-4-Deploy-Ingress-and-connect-frontend-to-backend" class="headerlink" title="Step 4 : Deploy Ingress and connect frontend to backend"></a>Step 4 : Deploy Ingress and connect frontend to backend</h4><p><a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">Ingress</a> is an API object that manages external access to the services in a cluster.</p><figure class="highlight yaml"><figcaption><span>Ingress Resource</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span> <span class="comment"># for versions before 1.14 use extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-ingress</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">        - path:</span> <span class="string">/?(.*)</span></span><br><span class="line"><span class="attr">          backend:</span></span><br><span class="line"><span class="attr">            serviceName:</span> <span class="string">student-app-client-service</span></span><br><span class="line"><span class="attr">            servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        - path:</span> <span class="string">/api/?(.*)</span></span><br><span class="line"><span class="attr">          backend:</span></span><br><span class="line"><span class="attr">            serviceName:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">            servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>We can define different HTTP rule in ingress configuration. For our application we have configured two rules in <code>backend</code> section. A backend is a combination of Service and port names as described in the Service doc. HTTP (and HTTPS) requests to the Ingress that matches the host and path of the rule are sent to the listed backend.</p><p><strong>Note</strong> While making call to backend API from react client we are prefixing request with <code>api</code> and then redirecting request to <code>student-app-api</code> thro our Ingress. We can also use service-name for direct making call to backend api.</p><p>lets deploy the final resource.<br>Fist we need to enable ingress by running <code>minikube addons enable ingress</code> and then â€˜kubectl apply -f student-app-ingress.yamlâ€™</p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/getIP.PNG"><p>letâ€™s try to access the application from minikube ip</p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/client.PNG"><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/kubernetes-full-stack-example.git" target="_blank" rel="noopener">here</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/keith-misner-h0Vxgz5tyXA-unsplash.jpg&quot;&gt;
&lt;p&gt;&lt;a sty
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Kubernetes" scheme="https://nirajsonawane.github.io/tags/Kubernetes/"/>
    
      <category term="React" scheme="https://nirajsonawane.github.io/tags/React/"/>
    
      <category term="MongoDB" scheme="https://nirajsonawane.github.io/tags/MongoDB/"/>
    
      <category term="Minikube" scheme="https://nirajsonawane.github.io/tags/Minikube/"/>
    
  </entry>
  
</feed>
