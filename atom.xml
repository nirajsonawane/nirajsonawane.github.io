<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niraj Sonawane</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nirajsonawane.github.io/"/>
  <updated>2020-05-17T21:37:52.026Z</updated>
  <id>https://nirajsonawane.github.io/</id>
  
  <author>
    <name>Niraj Sonawane</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Monitoring Spring Boot Application with Prometheus and Grafana on Kubernetes</title>
    <link href="https://nirajsonawane.github.io/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/"/>
    <id>https://nirajsonawane.github.io/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/</id>
    <published>2020-05-17T17:37:36.000Z</published>
    <updated>2020-05-17T21:37:52.026Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/helm.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@kmuza?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Carlos Muza"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Carlos Muza</span></a></p><p>Welcome to the second post on Prometheus &amp; Grafana. In last post <a href="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/" title="Monitoring Spring Boot Application with Prometheus and Grafana">Monitoring Spring Boot Application with Prometheus and Grafana</a> we Integrated <strong>Prometheus</strong> , <strong>Spring Boot</strong> and <strong>Grafana</strong> using docker. </p><p>In this post we will discuss, How to setup <strong>Prometheus</strong> and <strong>Grafana</strong> on <strong>Kubernetes</strong> using <strong>Helm Charts</strong></p><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-prometheus-grafana-kubernetes" target="_blank" rel="noopener">here</a></p><p>If you’re new to Kubernetes &amp; Prometheus I recommend reading the following hands-on guide on Kubernetes.</p><ol><li><a href="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/" title="Deploy React, Spring Boot & MongoDB Fullstack application on Kubernetes">Deploy React, Spring Boot & MongoDB Fullstack application on Kubernetes</a></li><li><a href="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/" title="Monitoring Spring Boot Application with Prometheus and Grafana">Monitoring Spring Boot Application with Prometheus and Grafana</a></li></ol><h4 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h4><p>You need to have <a href="https://kubernetes.io/docs/reference/kubectl/kubectl/" target="_blank" rel="noopener">Kubectl</a>, <a href="https://helm.sh/" target="_blank" rel="noopener">Helm</a>, <a href="https://kubernetes.io/docs/tutorials/hello-minikube/" target="_blank" rel="noopener">Minikube</a> installed on your machine. To Follow along this post, Basic knowledge of Kubernetes is needed.</p><h4 id="Step-1-Deploy-a-Spring-Boot-application-on-Kubernetes-and-expose-actuator-endpoints"><a href="#Step-1-Deploy-a-Spring-Boot-application-on-Kubernetes-and-expose-actuator-endpoints" class="headerlink" title="Step 1 : Deploy a Spring Boot application on Kubernetes and expose actuator endpoints"></a>Step 1 : Deploy a Spring Boot application on Kubernetes and expose actuator endpoints</h4><ol><li>How to deploy Spring boot application on Kubernetes is explained in detail <a href="https://nirajsonawane.github.io/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/">here</a> </li><li>How to expose actuator endpoints for Prometheus is explained <a href="https://nirajsonawane.github.io/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/">here</a>. </li></ol><p>In Kubernetes environment , we can configure <strong>annotations</strong> which will be used by prometheus to scrap data.Below is the complete deployment.yaml file</p><figure class="highlight yaml"><figcaption><span>spring-boot-prometheus-deployment.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">spring-boot-prometheus</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">spring-boot-prometheus</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">spring-boot-prometheus</span></span><br><span class="line"><span class="attr">      annotations:</span></span><br><span class="line">        <span class="string">prometheus.io/scrape:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="string">prometheus.io/port:</span> <span class="string">"8080"</span></span><br><span class="line">        <span class="string">prometheus.io/path:</span> <span class="string">"/actuator/prometheus"</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">spring-boot-prometheus</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">nirajsonawane/spring-boot-prometheus:0.0.1-SNAPSHOT</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          resources:</span></span><br><span class="line"><span class="attr">            limits:</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">294</span><span class="string">Mi</span></span><br></pre></td></tr></table></figure><h4 id="Step-2-Create-separate-namespace-for-Monitoring"><a href="#Step-2-Create-separate-namespace-for-Monitoring" class="headerlink" title="Step 2 : Create separate namespace for Monitoring"></a>Step 2 : Create separate namespace for Monitoring</h4><p>it’s always good idea to keep related things together, We will create separate namespace in Kubernetes for monitoring and will deploy all monitoring related application under that namespace.<br><figure class="highlight yaml"><figcaption><span>namespace.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">monitoring</span></span><br></pre></td></tr></table></figure></p><h4 id="Helm-Chart"><a href="#Helm-Chart" class="headerlink" title="Helm Chart"></a>Helm Chart</h4><p>Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of Kubernetes resources. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.<br>Charts are created as files laid out in a particular directory tree, then they can be packaged into versioned archives to be deployed.</p><h4 id="Step-3-Deploy-Prometheus-using-Helm-Chart"><a href="#Step-3-Deploy-Prometheus-using-Helm-Chart" class="headerlink" title="Step 3: Deploy Prometheus using Helm Chart"></a>Step 3: Deploy Prometheus using Helm Chart</h4><p>With the help of Helm,  We can deploy prometheus using single command.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install prometheus stable/prometheus --namespace monitoring</span><br></pre></td></tr></table></figure><br>This will deploy Prometheus into your cluster in the monitoring namespace and mark the release with the name prometheus.</p><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/prometheus.PNG"><p>let’s check if prometheus is running or not<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n monitoring </span><br></pre></td></tr></table></figure><br><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/prometheus-get.PNG"></p><h4 id="Step-4-Deploy-Grafana-using-Helm-Chart"><a href="#Step-4-Deploy-Grafana-using-Helm-Chart" class="headerlink" title="Step 4: Deploy Grafana using Helm Chart"></a>Step 4: Deploy Grafana using Helm Chart</h4><p>In Previous post we have manually created the data sources. Here we can create the  <strong>config map for Prometheus data source</strong> and   grafana deployment can use these config maps.</p><p>After Grafana Helm chart deployment, it looks for any config maps that contain a grafana_datasource label.</p><figure class="highlight yaml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus-grafana-datasource</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    grafana_datasource:</span> <span class="string">'1'</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">datasource.yaml:</span> <span class="string">|-</span></span><br><span class="line"><span class="attr">    apiVersion:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    datasources:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Prometheus</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">      access:</span> <span class="string">proxy</span></span><br><span class="line"><span class="attr">      orgId:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">http://prometheus-server.monitoring.svc.cluster.local</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>values.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidecar:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">xuxinkun/k8s-sidecar:0.0.7</span></span><br><span class="line"><span class="attr">  imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  datasources:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    label:</span> <span class="string">grafana_datasource</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Config map & Grafana deployment</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f helm/monitoring/grafana/config.yml </span><br><span class="line">helm install grafana stable/grafana -f helm/monitoring/grafana/values.yml --namespace monitoring  </span><br></pre></td></tr></table></figure><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/graphana.PNG"><p>Password protected Grafana instance will be be deployed, To know the password run the below command.<br><figure class="highlight plain"><figcaption><span>print password</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret --namespace monitoring grafana -o jsonpath=&quot;&#123;.data.admin-password&#125;&quot; | base64 --decode ; echo</span><br></pre></td></tr></table></figure><br>Now let’s do port-forward for accessing grafana<br><figure class="highlight plain"><figcaption><span>port-forward deployment</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl --namespace monitoring port-forward grafana-5c6bbf7f4c-n5pqb 3000</span><br></pre></td></tr></table></figure></p><p>Now if you goto <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> grafana interface will be available.<br><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/graphana-web.PNG"></p><p>Now lets add JVM chart which wil be using our Prometheus datasource.<br><img src="/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/graphana-JVM.PNG"></p><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-prometheus-grafana-kubernetes" target="_blank" rel="noopener">here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/17/Monitoring-Spring-Boot-Application-with-Prometheus-and-Grafana-on-Kubernetes/helm.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color:
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Prometheus" scheme="https://nirajsonawane.github.io/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="https://nirajsonawane.github.io/tags/Grafana/"/>
    
      <category term="Kubernetes" scheme="https://nirajsonawane.github.io/tags/Kubernetes/"/>
    
      <category term="Helm" scheme="https://nirajsonawane.github.io/tags/Helm/"/>
    
  </entry>
  
  <entry>
    <title>Monitoring Spring Boot Application with Prometheus and Grafana</title>
    <link href="https://nirajsonawane.github.io/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/"/>
    <id>https://nirajsonawane.github.io/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/</id>
    <published>2020-05-03T14:49:18.000Z</published>
    <updated>2020-05-04T20:30:58.061Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/carlos.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@kmuza?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Carlos Muza"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Carlos Muza</span></a></p><p>In this post we will discuss how to integrate <strong>Prometheus</strong> monitoring system with <strong>Spring Boot</strong> and <strong>Grafana</strong>. </p><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-prometheus-grafana-kubernetes" target="_blank" rel="noopener">here</a></p><p>This setup has three major components. </p><h2 id="Spring-Boot-and-Micrometer"><a href="#Spring-Boot-and-Micrometer" class="headerlink" title="Spring Boot and Micrometer"></a>Spring Boot and Micrometer</h2><p>Spring Boot Actuator provides number of features to help us monitor and manage spring boot application. Spring Boot Actuator also provides dependency management and auto-configuration for Micrometer.</p><p><a href="https://micrometer.io/" target="_blank" rel="noopener"><strong>Micrometer</strong></a> is an application metrics facade that supports numerous monitoring systems.<br>To integrate Prometheus with spring boot we just need to add  <code>micrometer-registry-prometheus</code> dependancy in class path.Once spring boot detects this dependancy it will expose <code>/actuator/prometheus</code> endpoint.</p><figure class="highlight xml"><figcaption><span>pom File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> Along with this dependancy we need to set below property.<br> <figure class="highlight xml"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=health,info,metrics,prometheus</span><br></pre></td></tr></table></figure></p><p>Now if we run the application and check <a href="http://localhost:8080/actuator/prometheus" target="_blank" rel="noopener">http://localhost:8080/actuator/prometheus</a></p><img src="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/prometheus.PNG"><h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><p><a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a> is an open-source monitoring and alerting toolkit originally built at SoundCloud.<br>Prometheus does one thing and it does it well. It has a simple yet powerful data model and a query language that lets you analyse how your applications and infrastructure are performing. </p><p>Prometheus has a <strong>data scraper</strong> that pulls metrics data over HTTP periodically at a configured interval. It stores metric data in <strong>A time-series Database</strong>. It has simple user interface that can be used to run query and visualize data. It also has powerful <strong>Altering system.</strong></p><p>let’s try to run Prometheus on docker.<br>We need to configure  <code>Prometheus</code> to scrape our spring boot application.<br><figure class="highlight yml"><figcaption><span>prometheus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'spring_micrometer'</span></span><br><span class="line"><span class="attr">    metrics_path:</span> <span class="string">'/actuator/prometheus'</span></span><br><span class="line"><span class="attr">    scrape_interval:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['YOUR-MACHINE-IP:8080']</span></span><br></pre></td></tr></table></figure></p><p>configuration is very much self explanatory. We have created job ‘spring_micrometer’ for scraping our spring boot application and provided the endpoint where prometheus can get the data. As we are runing Prometheus from docker in targets we need to provide IP of local machine.</p><p><strong>Run Prometheus on docker</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9090:9090 -v &lt;File path of prometheus.yml&gt;:/etc/prometheus/prometheus.yml prom/prometheus</span><br></pre></td></tr></table></figure></p><p>Now if you goto <a href="http://localhost:9090/targets" target="_blank" rel="noopener">http://localhost:9090/targets</a>  it should show our spring boot application.</p><img src="/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/targets.PNG"><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><p><a href="https://grafana.com/" target="_blank" rel="noopener">Grafana</a> is open source visualization and analytics software. It allows you to query, visualize, alert on, and explore your metrics no matter where they are stored. It provides you with tools to turn your time-series database (TSDB) data into beautiful graphs and visualizations.</p><p><strong>Grafana supports querying Prometheus from very initial version</strong></p><p>let’s try to setup grafana using docker. </p><figure class="highlight plain"><figcaption><span>docker run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 grafana/grafana </span><br></pre></td></tr></table></figure><p>Now if you goto <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> grafana interface will be available. Default username password is <strong>admin/admin</strong>.<br>you can add Prometheus data source and dashboard by following below steps.  </p> <video width="700" height="700" controls autoplay><br>  <source src="/asset/add-datasource.webm" type="video/webm"><br>Your browser does not support the video tag.<br></video> <p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/spring-boot-prometheus-grafana-kubernetes" target="_blank" rel="noopener">here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/03/monitoring-spring-boot-application-with-prometheus-and-grafana/carlos.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color:black;color:
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Prometheus" scheme="https://nirajsonawane.github.io/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="https://nirajsonawane.github.io/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>Deploy React, Spring Boot &amp; MongoDB Fullstack application on Kubernetes</title>
    <link href="https://nirajsonawane.github.io/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/"/>
    <id>https://nirajsonawane.github.io/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/</id>
    <published>2020-04-25T20:21:19.000Z</published>
    <updated>2020-05-17T21:48:37.863Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/keith-misner-h0Vxgz5tyXA-unsplash.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@keithmisner?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Keith Misner"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Keith Misner</span></a></p><p>In this post we will discuss how to Deploy Full stack application on <strong>Kubernetes</strong>. We will build small Student CRUD application using <strong>React</strong>  as Front end, <strong>Spring Boot</strong> as back end and <strong>MongoDB</strong> as persistance layer and we also configure <strong>PersistentVolumeClaim</strong>.</p><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/kubernetes-full-stack-example.git" target="_blank" rel="noopener">here</a></p><h4 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h4><p>To Follow along this post, You need to have <a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">minikube</a> and <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" target="_blank" rel="noopener">kubectl</a> installed on your system. Basic knowledge of Docker,Kubernetes &amp; Spring Boot is needed. </p><p>The sample application that we will be deploying on Kubernetes allows user to perform CRUD operations and the final deployment structure will be below.<br><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/student-app.jpg"></p><p>let’s start </p><h4 id="Step-1-Deploy-a-React-application-on-Kubernetes"><a href="#Step-1-Deploy-a-React-application-on-Kubernetes" class="headerlink" title="Step 1 : Deploy a React application on Kubernetes"></a>Step 1 : Deploy a React application on Kubernetes</h4><p>The React app is created by <code>create-react-app</code> and then docker image is available on Ducker hub. You can also this image to follow along <code>docker pull nirajsonawane/student-app-client</code></p><p><strong>Deployment configuration</strong><br><figure class="highlight yaml"><figcaption><span>student-app-client-deployment File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">nirajsonawane/student-app-client</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p><strong><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">Deployments</a></strong> in Kubernetes is declarative way of creating and updating pods. In above configurations we created <code>student-app-client</code> deployment indicated by <code>name</code>, with 1 number of replicas. The containers sections provides details about Which &amp; How the  containers should get created. </p><p><strong>Service configuration</strong><br><figure class="highlight yaml"><figcaption><span>student-app-client-service File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-client-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">student-app-client</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><br><strong><a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Service</a></strong> in Kubernetes is way to expose application running on a set of Pods (Deployments) as network service. The above configurations creates a new Service object named <code>student-app-client-service</code>, which targets TCP port 80 on any Pod with the <code>app=student-app-client label.</code> Kubernetes ServiceTypes allow you to specify what kind of Service you want. The default is ClusterIP. Please Check the documentation for more details.</p><p>let’s deploy it on our local Kubernetes cluster<br><strong>Start minikube</strong> <code>minikube start</code></p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/minikube-start.PNG"><p><strong>Check  minikube status</strong> <code>minikube status</code></p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/minikube-status.PNG"><p><strong>Apply deployment and service for client</strong> <code>kubectl apply -f &lt;file-name.yaml&gt;</code></p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/getAll.PNG"><p><strong>Tip:</strong> If you want to check if client pod is getting correctly deployed and want to access URL, Change the service type to <code>NodePort</code> and then run<br><code>minikube service student-app-client-service</code>  </p><h4 id="Step-2-Deploy-MongoDB-persistance-layer-on-Kubernetes"><a href="#Step-2-Deploy-MongoDB-persistance-layer-on-Kubernetes" class="headerlink" title="Step 2 : Deploy MongoDB persistance layer on Kubernetes"></a>Step 2 : Deploy MongoDB persistance layer on Kubernetes</h4><p>For Managing storage Kubernetes <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">PersistentVolume subsystem</a> provides API which defines <em>how storage is provided</em> and <em>how it is consumed.</em> For this we need to create two kubernetes resources</p><p><strong>A PersistentVolume (PV)</strong> is a piece of storage in the cluster that has been provisioned by an administrator or dynamically provisioned using Storage Classes.<br> lifecycle of PV is independent of any individual Pod that uses the PV. In simple words PV are user-provisioned storage volumes assigned to a Kubernetes cluster.</p><p><strong>A PersistentVolumeClaim (PVC)</strong>  is a request for storage by a user that deployment needs. It is similar to a Pod. Pods consume node resources and PVCs consume PV resources.</p><p>In order to deploy the the database component we need to define below resource configurations :</p><ol><li>PersistentVolumeClaim</li><li>Deployment</li><li>Service</li></ol><p><strong>PersistentVolumeClaim</strong><br><figure class="highlight yaml"><figcaption><span>PersistentVolumeClaim config File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mongo-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">256</span><span class="string">Mi</span></span><br></pre></td></tr></table></figure><br>The access modes are:<br>ReadWriteOnce – the volume can be mounted as read-write by a single node<br>ReadOnlyMany – the volume can be mounted read-only by many nodes<br>ReadWriteMany – the volume can be mounted as read-write by many nodes</p><p><strong>Deployment</strong><br><figure class="highlight yaml"><figcaption><span>Deployment Config File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">          image:</span> <span class="attr">mongo:3.6.17-xenial</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">storage</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/data/db</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">storage</span></span><br><span class="line"><span class="attr">          persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">            claimName:</span> <span class="string">mongo-pvc</span></span><br></pre></td></tr></table></figure><br>Deployment is requesting volume defined by claim Name <code>mongo-pvc</code> </p><p><strong>Service</strong><br><figure class="highlight yaml"><figcaption><span>Service Config File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">27017</span></span><br></pre></td></tr></table></figure></p><p>let’s apply all these new configurations.<br><strong>Apply PersistentVolumeClaim , deployment and service for MongoDB</strong> <code>kubectl apply -f &lt;file-name.yaml&gt;</code><br><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/mongo.PNG"> </p><h4 id="Step-3-Deploy-Spring-Boot-Backend-API-on-Kubernetes"><a href="#Step-3-Deploy-Spring-Boot-Backend-API-on-Kubernetes" class="headerlink" title="Step 3 : Deploy Spring Boot Backend API on Kubernetes"></a>Step 3 : Deploy Spring Boot Backend API on Kubernetes</h4><p>Our Backend api is simple spring boot application and it is using doing CRUD using <code>MongoRepository</code> complete code is available on Github <a href="https://github.com/nirajsonawane/kubernetes-full-stack-example.git" target="_blank" rel="noopener">here</a>  </p><p>Spring boot app is dockerized and docker image is available  docker hub. <code>docker pull nirajsonawane/student-app-api:0.0.1-SNAPSHOT</code><br><strong>Deployment</strong><br><figure class="highlight yaml"><figcaption><span>API Deployment Config File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">nirajsonawane/student-app-api:0.0.1-SNAPSHOT</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">MONGO_URL</span></span><br><span class="line"><span class="attr">              value:</span> <span class="attr">mongodb://mongo:27017/dev</span></span><br></pre></td></tr></table></figure><br>in above yaml file The <code>env:</code> is used to define environment variables for the POD. Our API expects MONGO_URL for configuration of <code>spring.data.mongodb.uri</code><br><figure class="highlight plain"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.data.mongodb.uri=$&#123;MONGO_URL:mongodb://localhost:27017/dev&#125;</span><br></pre></td></tr></table></figure><br>Now let’s talk about MONGO_URL.</p><p>mongodb url is configured like <code>mongodb://someHost:27017/dev</code> so what is <code>mongo</code> in our url?  <code>mongo</code> is name defined in service config file of mongo.<br>Pods within a cluster can talk to each other through the names of the Services exposing them.</p><p><strong>Service</strong><br><figure class="highlight yaml"><figcaption><span>Service Config File for API</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><br><strong>Apply deployment and service for API</strong> <code>kubectl apply -f &lt;file-name.yaml&gt;</code><br><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/api.PNG"></p><h4 id="Step-4-Deploy-Ingress-and-connect-frontend-to-backend"><a href="#Step-4-Deploy-Ingress-and-connect-frontend-to-backend" class="headerlink" title="Step 4 : Deploy Ingress and connect frontend to backend"></a>Step 4 : Deploy Ingress and connect frontend to backend</h4><p><a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">Ingress</a> is an API object that manages external access to the services in a cluster.</p><figure class="highlight yaml"><figcaption><span>Ingress Resource</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span> <span class="comment"># for versions before 1.14 use extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">student-app-ingress</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">        - path:</span> <span class="string">/?(.*)</span></span><br><span class="line"><span class="attr">          backend:</span></span><br><span class="line"><span class="attr">            serviceName:</span> <span class="string">student-app-client-service</span></span><br><span class="line"><span class="attr">            servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        - path:</span> <span class="string">/api/?(.*)</span></span><br><span class="line"><span class="attr">          backend:</span></span><br><span class="line"><span class="attr">            serviceName:</span> <span class="string">student-app-api</span></span><br><span class="line"><span class="attr">            servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>We can define different HTTP rule in ingress configuration. For our application we have configured two rules in <code>backend</code> section. A backend is a combination of Service and port names as described in the Service doc. HTTP (and HTTPS) requests to the Ingress that matches the host and path of the rule are sent to the listed backend.</p><p><strong>Note</strong> While making call to backend API from react client we are prefixing request with <code>api</code> and then redirecting request to <code>student-app-api</code> thro our Ingress. We can also use service-name for direct making call to backend api.</p><p>lets deploy the final resource.<br>Fist we need to enable ingress by running <code>minikube addons enable ingress</code> and then ‘kubectl apply -f student-app-ingress.yaml’</p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/getIP.PNG"><p>let’s try to access the application from minikube ip</p><img src="/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/client.PNG"><p>The code for this post is available on Github <a href="https://github.com/nirajsonawane/kubernetes-full-stack-example.git" target="_blank" rel="noopener">here</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/04/25/Deploy-React-Spring-Boot-MongoDB-Fullstack-application-on-Kubernetes/keith-misner-h0Vxgz5tyXA-unsplash.jpg&quot;&gt;
&lt;p&gt;&lt;a sty
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Kubernetes" scheme="https://nirajsonawane.github.io/tags/Kubernetes/"/>
    
      <category term="React" scheme="https://nirajsonawane.github.io/tags/React/"/>
    
      <category term="MongoDB" scheme="https://nirajsonawane.github.io/tags/MongoDB/"/>
    
      <category term="Minikube" scheme="https://nirajsonawane.github.io/tags/Minikube/"/>
    
  </entry>
  
  <entry>
    <title>Project Reactor [Part 3]  Error Handling</title>
    <link href="https://nirajsonawane.github.io/2020/01/04/Project-Reactor-Part-3-Error-Handling/"/>
    <id>https://nirajsonawane.github.io/2020/01/04/Project-Reactor-Part-3-Error-Handling/</id>
    <published>2020-01-04T16:18:19.000Z</published>
    <updated>2020-01-04T18:06:03.945Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/01/04/Project-Reactor-Part-3-Error-Handling/daniil.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@betagamma?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Daniil Silantev"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Daniil Silantev</span></a><br>This  is the third article on a series of  articles on <code>Project Reactor</code>. In previous <a href="http://localhost:4000/2020/01/01/Part-2-Process-and-Transform-Flux-Mono/" target="_blank" rel="noopener">article</a> we discussed different operators  in Project Reactor. In this article, I’ll show you how to do error handling in reactor. We’ll do this through examples.</p><p>In Reactive programming errors are also consider as terminal events. When an error occurs, event is sent to <code>onError</code> method of Subscriber.Before we start looking at how we handle errors, you must keep in mind that any error in a reactive sequence is a terminal event. Even if an error-handling operator is used, it <em>does not let the original sequence continue</em>. Rather, it converts the onError signal into the start of a new sequence (the fallback one). In other words, it replaces the terminated sequence upstream of it.</p><p><em>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/projectreactor-reactive-streams" target="_blank" rel="noopener">here</a></em></p><h3 id="OnError"><a href="#OnError" class="headerlink" title="OnError"></a>OnError</h3><p>In below code blok, subscriber will print values from 1,2,3,4,5 and after that onError code block will get executed. Note that number 6 will never be printed as Error is terminal event. <code>subscriber Completed</code> line will also not be printed on console as in case of error we do not get <code>onComplete</code> event.<br><figure class="highlight java"><figcaption><span>OnError</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testErrorFlowFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                                    .concatWith(Flux.error(<span class="keyword">new</span> RuntimeException(<span class="string">"Test"</span>)))</span><br><span class="line">                                    .concatWith(Flux.just(<span class="number">6</span>));</span><br><span class="line">   fluxFromJust.subscribe(</span><br><span class="line">           (it)-&gt; System.out.println(<span class="string">"Number is "</span> + it),  <span class="comment">// OnNext</span></span><br><span class="line">           (e) -&gt; e.printStackTrace(),                    <span class="comment">//OnError</span></span><br><span class="line">           () -&gt; System.out.println(<span class="string">"subscriber Completed"</span>) <span class="comment">//onComplete</span></span><br><span class="line">   );</span><br><span class="line">   <span class="comment">//To Unit test this code </span></span><br><span class="line">    StepVerifier</span><br><span class="line">           .create(fluxFromJust)</span><br><span class="line">           .expectNext(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">           .expectError(RuntimeException.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="onErrorResume"><a href="#onErrorResume" class="headerlink" title="onErrorResume"></a>onErrorResume</h3><p>If you want to report exception and then want to return some fallback value you can use ‘onErrorResume’  </p><figure class="highlight java"><figcaption><span>onErrorResume</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOnErrorResume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .concatWith(Flux.error(<span class="keyword">new</span> RuntimeException(<span class="string">"Test"</span>)))</span><br><span class="line">            .concatWith(Flux.just(<span class="number">6</span>))</span><br><span class="line">            .onErrorResume(e-&gt;&#123;</span><br><span class="line">                log.info(<span class="string">"**************"</span>);</span><br><span class="line">                System.out.println(<span class="string">"Exception occured "</span> + e.getMessage());</span><br><span class="line">                <span class="comment">//Return Some Fallback Values</span></span><br><span class="line">                <span class="keyword">return</span> Flux.just(<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">    </span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(fluxFromJust)</span><br><span class="line">            .expectNext(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .expectNext(<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">           .verifyComplete();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> <h3 id="onErrorReturn"><a href="#onErrorReturn" class="headerlink" title="onErrorReturn"></a>onErrorReturn</h3><p><code>onErrorReturn</code> can be used if you just want to return some fallback value for error item<br><figure class="highlight java"><figcaption><span>onErrorResume</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOnErrorReturn</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .concatWith(Flux.error(<span class="keyword">new</span> RuntimeException(<span class="string">"Test"</span>)))</span><br><span class="line">            .concatWith(Flux.just(<span class="number">6</span>))</span><br><span class="line">            .onErrorReturn(<span class="number">99</span>)</span><br><span class="line">           ;</span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(fluxFromJust)</span><br><span class="line">            .expectNext(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .expectNext(<span class="number">99</span>)</span><br><span class="line">            .verifyComplete();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="OnErrorContinue"><a href="#OnErrorContinue" class="headerlink" title="OnErrorContinue"></a>OnErrorContinue</h3><p>If you want to ignore error produce by any <strong>operator</strong> <code>onErrorContinue</code> can be use.<br><code>onErrorContinue</code>   will ignore the error element and continue the sequence.<br>in below example for number 3 we are getting some exception, onErrorContinue will simply ignore that exception.<br><figure class="highlight java"><figcaption><span>onErrorContinue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">   </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOnErrorContinue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .map(i-&gt;mapSomeValue(i))</span><br><span class="line">            .onErrorContinue((e,i)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">"Error For Item +"</span> + i );</span><br><span class="line">            &#125;)</span><br><span class="line">            ;</span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(fluxFromJust)</span><br><span class="line">            .expectNext(<span class="number">1</span>, <span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .verifyComplete();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">mapSomeValue</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( i==<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Exception From Map"</span>);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="OnErrorMap"><a href="#OnErrorMap" class="headerlink" title="OnErrorMap"></a>OnErrorMap</h3><p>To Map Exception to any custom exception<br><figure class="highlight java"><figcaption><span>OnErrorMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOnErrorMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .concatWith(Flux.error(<span class="keyword">new</span> RuntimeException(<span class="string">"Test"</span>)))</span><br><span class="line">            .concatWith(Flux.just(<span class="number">6</span>))</span><br><span class="line">            .map(i-&gt;i*<span class="number">2</span>)</span><br><span class="line">            .onErrorMap(e -&gt; <span class="keyword">new</span> CustomeException(e) )</span><br><span class="line">            ;</span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(fluxFromJust)</span><br><span class="line">            .expectNext(<span class="number">2</span>, <span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)</span><br><span class="line">            .expectError(CustomeException.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p><h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p>You can add retry on error. But keep in mind the retry will be started from first element.<br><figure class="highlight java"><figcaption><span>retry</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOnRetry</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">            .map(i-&gt;i*<span class="number">2</span>)</span><br><span class="line">            .onErrorMap(e -&gt; <span class="keyword">new</span> CustomeException(e) )</span><br><span class="line">            .retry(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(fluxFromJust)</span><br><span class="line">            .expectNext(<span class="number">2</span>, <span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line">            .expectNext(<span class="number">2</span>, <span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line">            .expectNext(<span class="number">2</span>, <span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line">            .expectError(CustomeException.class)</span><br><span class="line">            .verify();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure> </p><h3 id="onErrorStop"><a href="#onErrorStop" class="headerlink" title="onErrorStop"></a>onErrorStop</h3><p>   onErrorStop will stop the execution<br>   <figure class="highlight java"><figcaption><span>onErrorStop</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOnErrorStop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">            .concatWith(Flux.error(<span class="keyword">new</span> RuntimeException(<span class="string">"Test"</span>)))</span><br><span class="line">            .concatWith(Flux.just(<span class="number">6</span>))</span><br><span class="line">            .map(i-&gt;doubleValue(i))</span><br><span class="line">            .onErrorStop();</span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(fluxFromJust)</span><br><span class="line">            .expectNext(<span class="number">2</span>, <span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line">            .verifyError();</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">doubleValue</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Doing Multiple"</span>);</span><br><span class="line">    <span class="keyword">return</span> i*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="doOnError"><a href="#doOnError" class="headerlink" title="doOnError"></a>doOnError</h3><p>It you want to execute side effect on error<br><figure class="highlight java"><figcaption><span>doOnError</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDoOnError</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .concatWith(Flux.error(<span class="keyword">new</span> RuntimeException(<span class="string">"Test"</span>)))</span><br><span class="line">            .doOnError(e -&gt; System.out.println(<span class="string">"Rum some Side effect!!"</span>));</span><br><span class="line"></span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(fluxFromJust)</span><br><span class="line">            .expectNext(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .expectError()</span><br><span class="line">            .verify();</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="doFinally"><a href="#doFinally" class="headerlink" title="doFinally"></a>doFinally</h3><p><code>doFinally</code> is similar to <strong>finally block</strong> of try catch.<br><figure class="highlight java"><figcaption><span>doOnError</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDoFinally</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .concatWith(Flux.error(<span class="keyword">new</span> RuntimeException(<span class="string">"Test"</span>)))</span><br><span class="line">            .doFinally( i-&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span> (SignalType.ON_ERROR.equals(i)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Completed with Error "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (SignalType.ON_COMPLETE.equals(i)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Completed without Error "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(fluxFromJust)</span><br><span class="line">            .expectNext(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .expectError()</span><br><span class="line">            .verify();</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><em>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/projectreactor-reactive-streams" target="_blank" rel="noopener">here</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/01/04/Project-Reactor-Part-3-Error-Handling/daniil.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color:black;color:white;text-decoration:non
      
    
    </summary>
    
    
      <category term="Reactive Programming" scheme="https://nirajsonawane.github.io/tags/Reactive-Programming/"/>
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Project Reactor" scheme="https://nirajsonawane.github.io/tags/Project-Reactor/"/>
    
      <category term="WebFlux" scheme="https://nirajsonawane.github.io/tags/WebFlux/"/>
    
  </entry>
  
  <entry>
    <title>Project Reactor [Part 2]  Exploring Operators in Flux &amp; Mono</title>
    <link href="https://nirajsonawane.github.io/2020/01/01/Part-2-Process-and-Transform-Flux-Mono/"/>
    <id>https://nirajsonawane.github.io/2020/01/01/Part-2-Process-and-Transform-Flux-Mono/</id>
    <published>2020-01-01T16:17:37.000Z</published>
    <updated>2020-01-04T18:06:34.970Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/01/01/Part-2-Process-and-Transform-Flux-Mono/daniil.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@betagamma?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Daniil Silantev"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Daniil Silantev</span></a></p><p>This  is the second article on a series of <code>Project Reactor</code>. In previous <a href="http://localhost:4000/2019/12/28/Project-Reactor-Playing-With-Flux-Mono/" target="_blank" rel="noopener">article</a> we discussed basic of Flux an Mono. In this second article, I’ll show you how  to use Operators to modified and transform flux. We’ll do this through examples.<br><em>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/projectreactor-reactive-streams" target="_blank" rel="noopener">here</a></em></p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>This is similar to java 8 stream filter. It takes predicates, the elements which satisfies predicate condition will be pass thro.<br><figure class="highlight java"><figcaption><span>Filtering</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFilteringFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>).log();</span><br><span class="line">    Flux&lt;Integer&gt; filter = fluxFromJust.filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>);<span class="comment">//filter the even numbers only</span></span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(filter)</span><br><span class="line">            .expectNext(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)</span><br><span class="line">            .verifyComplete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h3><p>it filter out duplicates.<br><figure class="highlight java"><figcaption><span>Distinct</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">distinct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).log();</span><br><span class="line">    Flux&lt;Integer&gt; distinct = fluxFromJust.distinct();</span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(distinct)</span><br><span class="line">            .expectNext(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .verifyComplete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a>takeWhile</h3><p>Consumes values from flux until predicate returns TRUE for the values<br><figure class="highlight java"><figcaption><span>takeWhile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeWhile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>).log();</span><br><span class="line">    Flux&lt;Integer&gt; takeWhile = fluxFromJust.takeWhile(i -&gt; i &lt;=<span class="number">5</span>);</span><br><span class="line">    StepVerifier</span><br><span class="line">            .create(takeWhile)</span><br><span class="line">            .expectNext(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">            .verifyComplete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="skipWhile"><a href="#skipWhile" class="headerlink" title="skipWhile"></a>skipWhile</h3><p>Skips elements until predicate returns TRUE for the values<br><figure class="highlight java"><figcaption><span>skipWhile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skipWhile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>).log();</span><br><span class="line">     Flux&lt;Integer&gt; takeWhile = fluxFromJust.skipWhile(i -&gt; i &lt;=<span class="number">5</span>);</span><br><span class="line">     StepVerifier</span><br><span class="line">             .create(takeWhile)</span><br><span class="line">             .expectNext(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">             .verifyComplete();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>Map operation is similar to java 8 stream map operation. Map operation is use for transforming element from one Type to another.<br><figure class="highlight java"><figcaption><span>Convert String Flux To Integer Flux</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapOperationFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     Flux&lt;String&gt; fluxFromJust = Flux.just(<span class="string">"RandomString"</span>, <span class="string">"SecondString"</span>,<span class="string">"XCDFRG"</span>).log();</span><br><span class="line">     Flux&lt;Integer&gt; filter = fluxFromJust.map(i-&gt; i.length());</span><br><span class="line">     StepVerifier</span><br><span class="line">             .create(filter)</span><br><span class="line">             .expectNext(<span class="number">12</span>,<span class="number">12</span>,<span class="number">6</span>)</span><br><span class="line">             .verifyComplete();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>FlatMap Transform the elements emitted by this Flux asynchronously into Publishers, then flatten these inner publishers into a single Flux through merging, which allow them to interleave.<br><figure class="highlight java"><figcaption><span>FlatMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFlatMapFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).log();</span><br><span class="line">      Flux&lt;Integer&gt; integerFlux = fluxFromJust</span><br><span class="line">              .flatMap(i -&gt; getSomeFlux(i));<span class="comment">//getSomeFlux returns flux of range ,</span></span><br><span class="line">                                              <span class="comment">// then we do flatMap on all Flux to convert them in to single Flux</span></span><br><span class="line"></span><br><span class="line">      StepVerifier</span><br><span class="line">              .create(integerFlux)</span><br><span class="line">              .expectNextCount(<span class="number">30</span>)</span><br><span class="line">              .verifyComplete();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> Flux&lt;Integer&gt; <span class="title">getSomeFlux</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Flux.range(i,<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Keep information about the order in which source values were received by indexing them with a 0-based incrementing long<br><figure class="highlight java"><figcaption><span>index</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">maintainIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      Flux&lt;Tuple2&lt;Long, String&gt;&gt; index = Flux</span><br><span class="line">              .just(<span class="string">"First"</span>, <span class="string">"Second"</span>, <span class="string">"Third"</span>)</span><br><span class="line">              .index();</span><br><span class="line">  StepVerifier.create(index)</span><br><span class="line">              .expectNext(Tuples.of(<span class="number">0L</span>,<span class="string">"First"</span>))</span><br><span class="line">              .expectNext(Tuples.of(<span class="number">1L</span>,<span class="string">"Second"</span>))</span><br><span class="line">              .expectNext(Tuples.of(<span class="number">2L</span>,<span class="string">"Third"</span>))</span><br><span class="line">              .verifyComplete();</span><br><span class="line"></span><br><span class="line">  &#125;  </span><br></pre></td></tr></table></figure></p><h3 id="flatMapMany"><a href="#flatMapMany" class="headerlink" title="flatMapMany"></a>flatMapMany</h3><p>This operator is very useful if you want to convert mono to flux.flatMapMany transforms the signals emitted by this Mono into signal-specific Publishers, then forward the applicable Publisher’s emissions into the returned Flux.<br><figure class="highlight java"><figcaption><span>flatMapMany</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMapManyTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mono&lt;List&lt;Integer&gt;&gt; just = Mono.just(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        Flux&lt;Integer&gt; integerFlux = just.flatMapMany(it -&gt; Flux.fromIterable(it));</span><br><span class="line">        StepVerifier</span><br><span class="line">                .create(integerFlux)</span><br><span class="line">                .expectNext(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">                .verifyComplete();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h3><figure class="highlight java"><figcaption><span>startWith</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">startWith</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Flux&lt;Integer&gt; just = Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">       Flux&lt;Integer&gt; integerFlux = just.startWith(<span class="number">0</span>);</span><br><span class="line">       StepVerifier.create(integerFlux)</span><br><span class="line">               .expectNext(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">               .verifyComplete();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="concatWith"><a href="#concatWith" class="headerlink" title="concatWith"></a>concatWith</h3><p>The concatWith method does <strong>concatenation</strong> of two flux <strong>sequentially</strong> subscribing to the first flux  then waits for completion and then subscribes to the next.<br><figure class="highlight java"><figcaption><span>concatWith</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">concatWith</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Flux&lt;Integer&gt; just = Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">      Flux&lt;Integer&gt; integerFlux = just.concatWith(Flux.just(<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">      StepVerifier.create(integerFlux)</span><br><span class="line">              .expectNext(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">              .verifyComplete();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>Merge data from Publisher sequences contained in an array / vararg into an interleaved merged sequence. Unlike concat, sources are subscribed to eagerly.<br><figure class="highlight java"><figcaption><span>Merge</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zip</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      Flux&lt;Integer&gt; firsFlux = Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).delayElements(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">      Flux&lt;Integer&gt; secondFlux = Flux.just(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>).delayElements(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">      firsFlux.mergeWith(secondFlux)</span><br><span class="line">              .subscribe(System.out::println);</span><br><span class="line">      <span class="comment">//This will print numbers received from firsFlux and secondFlux in random order  </span></span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">11</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="CollectList"><a href="#CollectList" class="headerlink" title="CollectList"></a>CollectList</h3><p>Collect all elements emitted by this Flux into a List that is emitted by the resulting Mono when this sequence completes.</p><figure class="highlight java"><figcaption><span>CollectList</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">CollectList</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Mono&lt;List&lt;Integer&gt;&gt; listMono = Flux</span><br><span class="line">              .just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">              .collectList();</span><br><span class="line">      StepVerifier.create(listMono)</span><br><span class="line">              .expectNext(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">              .verifyComplete();</span><br><span class="line">  &#125;    </span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>CollectSortedList</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">CollectSortedListList</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Mono&lt;List&lt;Integer&gt;&gt; listMono = Flux</span><br><span class="line">              .just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>)</span><br><span class="line">              .collectSortedList();</span><br><span class="line">      StepVerifier.create(listMono)</span><br><span class="line">              .expectNext(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>))</span><br><span class="line">              .verifyComplete();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>Zip multiple sources together, that is to say wait for all the sources to emit one element and combine these elements once into an output value (constructed by the provided combinator). The operator will continue doing so until any of the sources completes. Errors will immediately be forwarded. This “Step-Merge” processing is especially useful in Scatter-Gather scenarios.</p><figure class="highlight java"><figcaption><span>Zip</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Flux&lt;Integer&gt; firsFlux = Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">     Flux&lt;Integer&gt; secondFlux = Flux.just(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line">     Flux&lt;Integer&gt; zip = Flux.zip(firsFlux, secondFlux, (num1, num2) -&gt; num1 + num2);</span><br><span class="line">     StepVerifier</span><br><span class="line">             .create(zip)</span><br><span class="line">             .expectNext(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>)</span><br><span class="line">             .verifyComplete();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><p>Collect all incoming values into a single List buffer that will be emitted by the returned Flux once this Flux completes.<br><figure class="highlight java"><figcaption><span>buffer</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Flux&lt;List&lt;Integer&gt;&gt; buffer = Flux</span><br><span class="line">              .just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">              .buffer(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">      StepVerifier</span><br><span class="line">              .create(buffer)</span><br><span class="line">              .expectNext(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">              .expectNext(Arrays.asList(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">              .expectNext(Arrays.asList(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">              .expectNext(Arrays.asList(<span class="number">7</span>))</span><br><span class="line">              .verifyComplete();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>You can check all available operators <a href="https://projectreactor.io/docs/core/release/reference/#which-operator" target="_blank" rel="noopener">here</a></p><p>It the next article, I’ll show you how to handel errors while processing data in Mono and Flux.</p><p><em>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/projectreactor-reactive-streams" target="_blank" rel="noopener">here</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/01/01/Part-2-Process-and-Transform-Flux-Mono/daniil.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color:black;color:white;text-decoration:no
      
    
    </summary>
    
    
      <category term="Reactive Programming" scheme="https://nirajsonawane.github.io/tags/Reactive-Programming/"/>
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Project Reactor" scheme="https://nirajsonawane.github.io/tags/Project-Reactor/"/>
    
      <category term="WebFlux" scheme="https://nirajsonawane.github.io/tags/WebFlux/"/>
    
  </entry>
  
  <entry>
    <title>Project Reactor [Part 1] - Playing With Flux &amp; Mono</title>
    <link href="https://nirajsonawane.github.io/2019/12/28/Project-Reactor-Playing-With-Flux-Mono/"/>
    <id>https://nirajsonawane.github.io/2019/12/28/Project-Reactor-Playing-With-Flux-Mono/</id>
    <published>2019-12-28T16:11:27.000Z</published>
    <updated>2020-01-04T18:07:50.029Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/12/28/Project-Reactor-Playing-With-Flux-Mono/daniil.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@betagamma?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Daniil Silantev"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Daniil Silantev</span></a></p><h3 id="What-is-Reactor"><a href="#What-is-Reactor" class="headerlink" title="What is Reactor"></a>What is Reactor</h3><p><a href="https://projectreactor.io/" target="_blank" rel="noopener">Project Reactor</a> implements the reactive programming model.It implements the Reactive Streams Specification  a standard for building reactive applications.<br>reactor integrates directly with the Java 8 functional APIs, notably CompletableFuture, Stream, and Duration. It offers composable asynchronous sequence APIs — <strong>Flux (for [N] elements) and Mono (for [0|1] elements).</strong></p><h3 id="Key-Components-of-Reactive-Manifesto-and-Reactive-Streams-Specification"><a href="#Key-Components-of-Reactive-Manifesto-and-Reactive-Streams-Specification" class="headerlink" title="Key Components of Reactive Manifesto and Reactive Streams Specification"></a>Key Components of Reactive Manifesto and Reactive Streams Specification</h3><p><a href="https://www.reactive-streams.org/" target="_blank" rel="noopener">Reactive Streams</a> is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure. This encompasses efforts aimed at runtime environments (JVM and JavaScript) as well as network protocols. Reactive Specification are based on <a href="https://www.reactivemanifesto.org/" target="_blank" rel="noopener">Reactive Manifesto</a></p><p>Reactive Specifications defines below key Contracts<br><strong>Publisher</strong>: Representing sources of data also called as Observables.<br><strong>Subscriber</strong>: Listening to the Publisher. Subscriber subscribes to publisher<br><strong>Subscription</strong>: Publisher will create a subscription for every Subscriber which will try to subscribe to it.<br><strong>Processor</strong>: A processor can be used as a publisher as well as subscriber. Processors are used for data transformation. these are set of methods for modifying and composing the data.</p><h4 id="Objective-Of-this-post"><a href="#Objective-Of-this-post" class="headerlink" title="Objective Of this post"></a>Objective Of this post</h4><p>Objective of these series of post is to show, How to use <code>Flux</code> &amp; <code>Mono</code>. How to subscribe to them for consuming data. Different operation that we can perform on data while consuming data. I will be using <strong>Spring Webflux</strong> which internally used <strong>Project Reactor</strong>  </p><p>Let get started, We need <code>spring-boot-starter-webflux</code> to get started.Project rector also provides very handy library <code>reactor-test</code> for unit testing.   </p><p><em>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/projectreactor-reactive-streams" target="_blank" rel="noopener">here</a></em></p><figure class="highlight xml"><figcaption><span>Pom File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Creating-Flux-and-Mono"><a href="#Creating-Flux-and-Mono" class="headerlink" title="Creating Flux and Mono"></a>Creating Flux and Mono</h5><p><strong>Flux</strong> A Reactive Streams Publisher with rx operators that emits 0 to N elements, and then completes(successfully or with an error).</p><figure class="highlight java"><figcaption><span>Few Example of creating Flux</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">//Create a Flux that emits the provided elements and then completes.</span></span><br><span class="line">Flux&lt;Integer&gt; integerFlux = Flux.fromIterable(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));<span class="comment">//Create a Flux that emits the items contained in the provided Iterable.</span></span><br><span class="line">Flux.fromStream(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).stream());<span class="comment">//Create a Flux that emits the items contained in the provided Stream.</span></span><br><span class="line">Integer[] num2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">Flux&lt;Integer&gt; integerFluxFromArray = Flux.fromArray(num2);<span class="comment">//Create a Flux that emits the items contained in the provided array.</span></span><br><span class="line">Flux.generate(&lt;Consumer&gt;) ;<span class="comment">//Programmatically create a Flux by generating signals one-by-one via a consumer callback. </span></span><br><span class="line">Flux.Creare(&lt;Consumer&gt;); <span class="comment">//Programmatically create a Flux with the capability of emitting multiple elements in a synchronous or asynchronous manner through the FluxSink API.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Mono</strong> A Reactive Streams Publisher with basic rx operators that completes successfully by emitting an element, or with an error.</p><figure class="highlight java"><figcaption><span>Few Examples of creating Mono</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mono&lt;Integer&gt; just = Mono.just(<span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">Mono&lt;Object&gt; empty = Mono.empty();<span class="comment">//</span></span><br><span class="line">Mono.create(); <span class="comment">//Create a Mono that completes without emitting any item.</span></span><br><span class="line">Mono.from(&lt;Publisher&gt;)<span class="comment">//Expose the specified Publisher with the Mono API, and ensure it will emit 0 or 1 item.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//there are multiple options available for creating mono from Callable,CompletionStage,CompletableFuture etc </span></span><br><span class="line">Mono.fromCallable() </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flux-amp-Mono-are-lazy"><a href="#Flux-amp-Mono-are-lazy" class="headerlink" title="Flux &amp; Mono are lazy"></a>Flux &amp; Mono are lazy</h4><p>Lazy in context of reactive programming  means, No Matter how many operation you do on the stream, They won’t be executed until you consume it. Flux &amp; Mono start emitting values only when subscriber is attached.</p><h5 id="Creating-Subscriber-and-consuming-values"><a href="#Creating-Subscriber-and-consuming-values" class="headerlink" title="Creating Subscriber and consuming values"></a>Creating Subscriber and consuming values</h5><p>Subscriber has multiple overloaded methods, let’s check few of them.</p><p>Subscriber with <code>onNext</code><br><figure class="highlight java"><figcaption><span>Subscriber with consumer (onNext)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">fluxFromJust.subscribe(i-&gt;System.out.println(i));<span class="comment">//It will print number 1,2,3</span></span><br></pre></td></tr></table></figure></p><p>Subscriber with <code>onNext</code> &amp; <code>onError</code>. OnError will be get call in case of error.<br>Flux has one handy <code>concatWith</code> which we can use to concat error<br><figure class="highlight java"><figcaption><span>Subscriber with consumer and error handler (onError)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Flux&lt;Integer&gt; fluxFromJust = </span><br><span class="line">        Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">             .concatWith(Flux.error( <span class="keyword">new</span> RuntimeException(<span class="string">"Test Exception"</span>));</span><br><span class="line">        fluxFromJust.subscribe(</span><br><span class="line">                i-&gt;System.out.println(i),<span class="comment">// onNext</span></span><br><span class="line">                e-&gt;System.out.println(<span class="string">"In Error Block "</span> + e.getMessage()) <span class="comment">//onError</span></span><br><span class="line">        );</span><br></pre></td></tr></table></figure><br>Subscriber with <code>onNext</code>, <code>onError</code> and <code>onComplete</code>. On Successful completion onComplete method get’s called<br><figure class="highlight java"><figcaption><span>Subscriber with consumer, error handler and onComplete</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Flux&lt;Integer&gt; fluxFromJust = </span><br><span class="line">        Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">             .concatWith(Flux.error( <span class="keyword">new</span> RuntimeException(<span class="string">"Test Exception"</span>));</span><br><span class="line">        fluxFromJust.subscribe(</span><br><span class="line">                i-&gt;System.out.println(i),<span class="comment">//Will Print 1,2,3 //onNext</span></span><br><span class="line">                e-&gt;System.out.println(<span class="string">"In Error Block "</span> + e.getMessage())<span class="comment">//OnError</span></span><br><span class="line">                ()-&gt; System.out.println(<span class="string">"Process Completed"</span>) <span class="comment">//OnComplete</span></span><br><span class="line">        );</span><br></pre></td></tr></table></figure></p><p>To Log the activities on Flux / Mono. We can use log method and it will start logging all events.<br><figure class="highlight java"><figcaption><span>Log Events</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flux&lt;Integer&gt; fluxFromJust = </span><br><span class="line">        Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">            .log()             </span><br></pre></td></tr></table></figure></p><h3 id="Lets-write-some-Unit-test-using-reactor-test"><a href="#Lets-write-some-Unit-test-using-reactor-test" class="headerlink" title="Lets write some Unit test using reactor-test"></a>Lets write some Unit test using reactor-test</h3><p><code>StepVerifier</code> can be use like below to validate the expectations<br><figure class="highlight java"><figcaption><span>StepVerifier</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateFluxAndSubscribe</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).log();</span><br><span class="line">        StepVerifier</span><br><span class="line">                .create(fluxFromJust)</span><br><span class="line">                .expectNext(<span class="number">1</span>)</span><br><span class="line">                .expectNext(<span class="number">2</span>)</span><br><span class="line">                .expectNext(<span class="number">3</span>)</span><br><span class="line">                .verifyComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>IF You want to verify only count then we can use <code>expectNextCount</code><br><figure class="highlight java"><figcaption><span>StepVerifier</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateFluxAndSubscribeVerifyCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).log();</span><br><span class="line">        StepVerifier</span><br><span class="line">                .create(fluxFromJust)</span><br><span class="line">                .expectNextCount(<span class="number">3</span>)</span><br><span class="line">                .verifyComplete();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>To Assert on Error<br><figure class="highlight java"><figcaption><span>StepVerifier</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateFluxAndSubscribeVerifyError</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       Flux&lt;Integer&gt; fluxFromJust = Flux.just(<span class="number">1</span>).concatWith(Flux.error(<span class="keyword">new</span> RuntimeException(<span class="string">"Test"</span>)));</span><br><span class="line">       StepVerifier</span><br><span class="line">               .create(fluxFromJust)</span><br><span class="line">               .expectNextCount(<span class="number">1</span>)</span><br><span class="line">               .verifyError(RuntimeException.class);</span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure><br>It the next article, I’ll show you how to process and transform data in Mono and Flux.<br><em>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/projectreactor-reactive-streams" target="_blank" rel="noopener">here</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/12/28/Project-Reactor-Playing-With-Flux-Mono/daniil.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color:black;color:white;text-decoration:no
      
    
    </summary>
    
    
      <category term="Reactive Programming" scheme="https://nirajsonawane.github.io/tags/Reactive-Programming/"/>
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Project Reactor" scheme="https://nirajsonawane.github.io/tags/Project-Reactor/"/>
    
      <category term="WebFlux" scheme="https://nirajsonawane.github.io/tags/WebFlux/"/>
    
  </entry>
  
  <entry>
    <title>Testcontainers With Spring Boot For Integration Testing</title>
    <link href="https://nirajsonawane.github.io/2019/12/25/Testcontainers-With-Spring-Boot-For-Integration-Testing/"/>
    <id>https://nirajsonawane.github.io/2019/12/25/Testcontainers-With-Spring-Boot-For-Integration-Testing/</id>
    <published>2019-12-25T16:25:48.000Z</published>
    <updated>2020-01-05T15:37:51.291Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/12/25/Testcontainers-With-Spring-Boot-For-Integration-Testing/logo.png"><h2 id="Take-your-Integration-Tests-to-next-level-using-Testcontainers"><a href="#Take-your-Integration-Tests-to-next-level-using-Testcontainers" class="headerlink" title="Take your Integration Tests to next level using Testcontainers"></a>Take your Integration Tests to next level using <a href="https://www.testcontainers.org/" target="_blank" rel="noopener">Testcontainers</a></h2><p>Now days the modern application interacts with multiple systems like database, microservice within system ,external API, middleware systems etc.It’s become very critical for the success of project to have good Integration test strategy.<br>In memory database like H2, HSQLDB are very popular for Integration testing of persistance layer but these are not close to production environment. If application has dependancy on Docker containers, Then it’s become more difficult to test that code in Integration environment. <strong>Testcontainers help us to handle these challenges</strong></p><h3 id="What-is-Testcontainers"><a href="#What-is-Testcontainers" class="headerlink" title="What is Testcontainers?"></a>What is Testcontainers?</h3><p><a href="https://www.testcontainers.org/" target="_blank" rel="noopener">Testcontainers</a> is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a <strong>Docker container</strong>.</p><p><em>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/SpringBoot-mongodb-testcontainers.git" target="_blank" rel="noopener">here</a></em></p><h3 id="Let’s-Write-some-Integration-Test-using-Testcontainers-For-Spring-Boot-App"><a href="#Let’s-Write-some-Integration-Test-using-Testcontainers-For-Spring-Boot-App" class="headerlink" title="Let’s Write some Integration Test using Testcontainers For Spring Boot App"></a>Let’s Write some Integration Test using Testcontainers For Spring Boot App</h3><p><a href="https://nirajsonawane.github.io/2019/12/16/Spring-Boot-Mongodb-Docker-Compose">In previous  Post</a> We created simple Spring Boot application that uses <strong>Mongodb Database</strong> (containrized) let’s write integration test for that. </p><p>It’s easy to add Testcontainers to your project - let’s walk through a quick example to see how.</p><h4 id="Add-Testcontainer-to-project"><a href="#Add-Testcontainer-to-project" class="headerlink" title="Add Testcontainer to project"></a>Add Testcontainer to project</h4><figure class="highlight xml"><figcaption><span>Pom File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testcontainers<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testcontainers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testcontainers<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>                </span><br></pre></td></tr></table></figure><h4 id="Creating-a-generic-container-based-on-an-image"><a href="#Creating-a-generic-container-based-on-an-image" class="headerlink" title="Creating a generic container based on an image"></a>Creating a generic container based on an image</h4><p>For Mongodb there is no special test container image available, But we can create one by extending <code>GenericContainer</code><br><figure class="highlight java"><figcaption><span>MongoDbContainer</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDbContainer</span> <span class="keyword">extends</span> <span class="title">GenericContainer</span>&lt;<span class="title">MongoDbContainer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MONGODB_PORT = <span class="number">27017</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_IMAGE_AND_TAG = <span class="string">"mongo:3.2.4"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MongoDbContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_IMAGE_AND_TAG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MongoDbContainer</span><span class="params">(@NotNull String image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(image);</span><br><span class="line">        addExposedPort(MONGODB_PORT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMappedPort(MONGODB_PORT);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>You can also create generic container using ClassRule</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ClassRule</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> GenericContainer mongo = <span class="keyword">new</span> GenericContainer(<span class="string">"mongo:3.2.4"</span>)</span><br><span class="line">                                             .withExposedPorts(<span class="number">27017</span>);</span><br></pre></td></tr></table></figure></p><h4 id="Starting-the-container-and-using-it-in-test"><a href="#Starting-the-container-and-using-it-in-test" class="headerlink" title="Starting the container and using it in test"></a>Starting the container and using it in test</h4><figure class="highlight java"><figcaption><span>MongoDbContainerTest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(initializers = MongoDbContainerTest.MongoDbInitializer.class)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDbContainerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FruitRepository fruitRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MongoDbContainer mongoDbContainer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startContainerAndPublicPortIsAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mongoDbContainer = <span class="keyword">new</span> MongoDbContainer();</span><br><span class="line">        mongoDbContainer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">containerStartsAndPublicPortIsAvailable</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        FruitModel build = FruitModel.builder().color(<span class="string">"Red"</span>).name(<span class="string">"banana"</span>).build();</span><br><span class="line">        mockMvc.perform(post(<span class="string">"/fruits"</span>)</span><br><span class="line">                .contentType(<span class="string">"application/json"</span>)</span><br><span class="line">                .content(objectMapper.writeValueAsString(build)))</span><br><span class="line">               .andExpect(status().isCreated());</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, fruitRepository.findAll().size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDbInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">"Overriding Spring Properties for mongodb !!!!!!!!!"</span>);</span><br><span class="line"></span><br><span class="line">            TestPropertyValues values = TestPropertyValues.of(</span><br><span class="line">                    <span class="string">"spring.data.mongodb.host="</span> + mongoDbContainer.getContainerIpAddress(),</span><br><span class="line">                    <span class="string">"spring.data.mongodb.port="</span> + mongoDbContainer.getPort()</span><br><span class="line"></span><br><span class="line">            );</span><br><span class="line">            values.applyTo(configurableApplicationContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lets see what we are doing in test line by line.<br><code>@SpringBootTest</code> As we want to write Integration test we are using <code>@SpringBootTest</code> which tells Spring to load complete application context.</p><p><code>@AutoConfigureMockMvc</code> configure auto-configuration of MockMvc. As we want to test<br>controller-&gt;service-&gt;repository -&gt;database</p><p> <code>@ContextConfiguration</code> Overriding Spring properties. We need to override <code>host</code> and <code>port</code> on which  mongodb testcontainer has started.  </p><p> <code>Starting Mongodb container</code> in <code>BeforeAll</code> hook so that DB instance is available during the test.<br>Then In test  we are simpaly calling post method on controller and after that checking if actually data is getting inserted in database or not.   </p><h4 id="Using-Predefined-Testcontainer"><a href="#Using-Predefined-Testcontainer" class="headerlink" title="Using Predefined  Testcontainer"></a>Using Predefined  Testcontainer</h4><p>There are some predefined Testcontainer are available, Which are very useful and easy to use<br>e.g <code>MySQLContainer</code> is available for mysql database. let’s  see how to use that<br><figure class="highlight java"><figcaption><span>MySQLContainerTest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Testcontainers</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLContainerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Container</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MySQLContainer mySQLContainer = <span class="keyword">new</span> MySQLContainer();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"Should start the container"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertTrue(mySQLContainer.isRunning());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>To use the Testcontainers extension annotate your test class with <code>@Testcontainers.</code></p><p><strong>Note</strong> You need to think about how you want to use container </p><ol><li>Containers that are restarted for every test method</li><li>Containers that are shared between all methods of a test class</li></ol><p>If you define Container like this<br><code>@Container private MySQLContainer mySQLContainer = new MySQLContainer();</code> Then it will create new instance for each test case and it you use <code>static</code> like this<br><code>@Container private static MySQLContainer mySQLContainer = new MySQLContainer();</code> then same Instance will be used for all tests.</p><p><strong>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/SpringBoot-mongodb-testcontainers.git" target="_blank" rel="noopener">here</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/12/25/Testcontainers-With-Spring-Boot-For-Integration-Testing/logo.png&quot;&gt;
&lt;h2 id=&quot;Take-your-Integration-Tests-to-next-level-u
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Mongodb" scheme="https://nirajsonawane.github.io/tags/Mongodb/"/>
    
      <category term="Docker" scheme="https://nirajsonawane.github.io/tags/Docker/"/>
    
      <category term="testcontainers" scheme="https://nirajsonawane.github.io/tags/testcontainers/"/>
    
      <category term="containers" scheme="https://nirajsonawane.github.io/tags/containers/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot + Mongodb + Docker Compose</title>
    <link href="https://nirajsonawane.github.io/2019/12/16/Spring-Boot-Mongodb-Docker-Compose/"/>
    <id>https://nirajsonawane.github.io/2019/12/16/Spring-Boot-Mongodb-Docker-Compose/</id>
    <published>2019-12-16T04:40:00.000Z</published>
    <updated>2019-12-19T21:11:31.338Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/12/16/Spring-Boot-Mongodb-Docker-Compose/gabriel.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@gabebarletta?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Gabriel Barletta"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Gabriel Barletta</span></a><br>In this post we will discuss how to use <em>Docker Compose</em> to define and run multi-container Docker applications.<br><strong>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/spring-boot-mongodb-docker-compose-.git" target="_blank" rel="noopener">here</a></strong></p><p><strong>Prerequisites</strong><br>To Follow along this post basic knowledge of Docker, Container &amp; Spring Boot is Needed. docker and docker-compose should be install on your system. </p><p><strong>Docker Compose</strong><br>Docker Compose is a tool for defining and running multi-container Docker applications. We define and configure all the services used in application in single file called as “docker-compose.yml” More details about docker compose can be found in <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">documentation</a>. Docker compose helps and reduces lot of overhead of managing apps that has dependancy on multiple containers.<br>Docker compose significantly improves productivity as we can run complete application stack using single command. Docker compose runs all the containers on a single host by default. </p><p><strong>Docker Compose in Action</strong><br>I will create simple hypothetical application that will expose rest endpoint to manage fruit information. Application is build using two containers. I will use docker compose to run this multi-container application.<br><img src="/2019/12/16/Spring-Boot-Mongodb-Docker-Compose/docker.png"></p><p><strong>Spring Boot APP</strong><br>Create very Spring Spring boot application using <a href="https://start.spring.io/" target="_blank" rel="noopener">Spring initializr</a> use below dependency. <code>spring-boot-starter-web</code>,<code>spring-boot-starter-actuator</code>,<code>lombok</code> and you should be able to run the application.Check <a href="http://localhost:8080/actuator/health" target="_blank" rel="noopener">http://localhost:8080/actuator/health</a> point is returning status as “UP”</p><p><strong>Dokcrizeing spring boot app</strong><br>Dockerizing Spring Boot app is very straightforward,below is sample <code>Dockerfile</code> file.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ARG JAR_FILE=target/*.jar</span><br><span class="line">COPY $&#123;JAR_FILE&#125; app.jar</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]               </span><br></pre></td></tr></table></figure></p><p><strong>Creating Docker Image</strong><br><code>docker build -t api-docker-image .</code><br>Run above command to create docker image. There are maven plugins available for creating docker image during maven build. for simplicity i am using simple docker command to create image.   </p><p><strong>Running Docker Image</strong><br><code>docker run -d -p 9090:8080 api-docker-image</code><br>we are mapping 8080 container port to 9090 host machine port means the application will be available on host machine on port 9090. Now Spring boot application  is running on docker and will be available on<br><a href="http://localhost:9090/actuator/health" target="_blank" rel="noopener">http://localhost:9090/actuator/health</a></p><p><strong>Now let’s add mongodb</strong><br>Add below dependancy in pom file  </p><figure class="highlight xml"><figcaption><span>Pom File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>                 </span><br></pre></td></tr></table></figure><p>Rest endpoints to save and get Fruit information.<br><figure class="highlight java"><figcaption><span>Rest Controller</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FruitService fruitService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitController</span><span class="params">(FruitService fruitService)</span> </span>&#123;<span class="keyword">this</span>.fruitService = fruitService;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/fruits"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">addFruit</span><span class="params">(@RequestBody FruitRequest fruitRequest)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Request : &#123;&#125;"</span>, fruitRequest);</span><br><span class="line">        fruitService.saveFruit(fruitRequest.toFruitModel());</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/fruits"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;FruitModel&gt; <span class="title">getAllFruit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fruitService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Simple JPA MongoRepository for saving and getting data to/from mongodb<br><figure class="highlight java"><figcaption><span>JPA Repository & Fruit JPA Model</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FruitRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">FruitModel</span> ,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Now we want to run mongodb database as <strong>separate container</strong> and spring boot app as separate container application. We can do this manually by running docker commands, But that’s very tedious task and lot of configurations needed for containers to talk to each other. docker compose simplifies these things for us  </p><p><strong>Define services in a Compose file</strong><br>We Create a file called docker-compose.yml and starts defining all the containers needed for application as services.<br>in below docker compose file we are defining two services one is for database and one for rest-api and we do all the needed configuration at single place. As our spring boot app (api) is dependent on database we are specifying that as link. There are lof configuration we can do in docker compose file.    </p><figure class="highlight yml"><figcaption><span>docker-compose</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  api-database:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mongo:3.2.4</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">"api-database"</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line"><span class="attr">    command:</span> <span class="bullet">--smallfiles</span></span><br><span class="line"><span class="attr">  api:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">api-docker-image</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9091</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">api-database</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>Configure mongodb host name using spring config property using service name defined in docker-compose.<br><figure class="highlight yml"><figcaption><span>docker-compose</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.data.mongodb.host=api-database</span></span><br></pre></td></tr></table></figure></p><p><strong>Running Docker Compose</strong><br><code>docker-compose up</code> single command is needed to start the application. command will create one container for database and one for spring-boot app as defined in docker-compose file.  </p><p><strong>Summary</strong> </p><p>Using Compose is basically a three-step process:</p><ol><li><p>Define your app’s environment with a Dockerfile so it can be reproduced anywhere.</p></li><li><p>Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.</p></li><li><p>Run docker-compose up and Compose starts and runs your entire app.</p></li></ol><p><strong>The code for this post is available on my Github account <a href="https://github.com/nirajsonawane/spring-boot-mongodb-docker-compose-.git" target="_blank" rel="noopener">here</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/12/16/Spring-Boot-Mongodb-Docker-Compose/gabriel.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color:black;color:white;text-decoration:none;
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Mongodb" scheme="https://nirajsonawane.github.io/tags/Mongodb/"/>
    
      <category term="Docker" scheme="https://nirajsonawane.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Creating Custom Spring Boot Starter To Implement Cross-Cutting Concerns</title>
    <link href="https://nirajsonawane.github.io/2019/10/21/Creating-Custom-Spring-Boot-Starter-To-implement-cross-cutting-concerns/"/>
    <id>https://nirajsonawane.github.io/2019/10/21/Creating-Custom-Spring-Boot-Starter-To-implement-cross-cutting-concerns/</id>
    <published>2019-10-21T14:29:52.000Z</published>
    <updated>2019-11-08T02:51:02.428Z</updated>
    
    <content type="html"><![CDATA[<p>Now days Spring Boot has become de facto standard for numerous Web enterprise developments. Spring Boot helps to improve developer’s productivity by implementing lot of cross-cutting concerns as <strong>Starter Projects</strong>. We Just add these dependancy in our projects or configure few properties and <strong>Spring Boot does the magic for us by doing autoconfiguration.</strong> The starters projects automatically configure lof of stuff for us. This helps us to get started more quickly.<br>However, With a lof magic happening in background, it’s very Important to know How things work.    </p><p><strong>The code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-boot-starter.git" target="_blank" rel="noopener">here</a>.</strong></p><h3 id="How-Spring-Boot’s-Starter-Works"><a href="#How-Spring-Boot’s-Starter-Works" class="headerlink" title="How Spring Boot’s Starter Works"></a>How Spring Boot’s Starter Works</h3><p>On Startup, Spring Boot checks for <code>spring.factories</code> file. This file is located in the META-INF directory.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">ns.aop.LogMethodExecutionTimeAutoConfiguration                           </span><br></pre></td></tr></table></figure><br>All the classes with <code>@Configuration</code> should list under <code>EnableAutoConfiguration</code> key in the <code>spring.factories</code> file.<br>Spring Will create Beans Based on <code>configuration</code> and <code>Conditions</code> defined in Configurations files. We will see this in detail with example.     </p><h3 id="Let’s-Create-Library-That-logs-Method-Execution-Time"><a href="#Let’s-Create-Library-That-logs-Method-Execution-Time" class="headerlink" title="Let’s Create Library That logs Method Execution Time"></a>Let’s Create Library That logs Method Execution Time</h3><blockquote><p>lets imagine, We want to log the method execution time for few methods in our project. We should be able to enable/disable this feature based on some property.</p></blockquote><h4 id="Creating-Our-Custom-Spring-Boot-Starter-Project"><a href="#Creating-Our-Custom-Spring-Boot-Starter-Project" class="headerlink" title="Creating Our Custom Spring Boot Starter Project"></a>Creating Our Custom Spring Boot Starter Project</h4><p><strong>Create Spring Boot Project with Below dependencies.</strong><br><figure class="highlight xml"><figcaption><span>Pom File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>                       </span><br></pre></td></tr></table></figure><br><code>spring-boot-dependencies</code> allows us to use any Spring dependency.<br><code>spring-boot-autoconfigure</code> for using autoconfigure feature<br><code>spring-boot-configuration-processor</code> to generate metadata for our configuration properties. IDEs can give us autocomplete. </p><h4 id="Use-AOP-to-log-method-execution-time"><a href="#Use-AOP-to-log-method-execution-time" class="headerlink" title="Use AOP to log method execution time"></a>Use AOP to log method execution time</h4><p>Create simple annotation <code>LogMethodExecutionTime</code> to be used on method and aspect to log time.  </p><figure class="highlight java"><figcaption><span>Annotation & Aspect</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogMethodExecutionTime &#123;</span><br><span class="line">&#125;     </span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogMethodExecutionTimeAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"@annotation(LogMethodExecutionTime)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">logExecutionTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">final</span> Object proceed = joinPoint.proceed();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> executionTime = System.currentTimeMillis() - start;</span><br><span class="line">        log.info(joinPoint.getSignature() + <span class="string">" executed in "</span> + executionTime + <span class="string">"ms"</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Creating-Our-Own-Autoconfiguration"><a href="#Creating-Our-Own-Autoconfiguration" class="headerlink" title="Creating Our Own Autoconfiguration"></a>Creating Our Own Autoconfiguration</h4><p>We want to control the <em>Method Execution Time logging</em> to be enable based on certain properties. Spring provides lot of <code>@Conditional</code> annotations.Based on different conditions we can control Configurations of starter projects. For this example we can use <code>ConditionalOnProperty</code>.<br>our starter will be activated only if <code>logging.api.enabled</code> property is present and has value <code>true</code><br><figure class="highlight java"><figcaption><span>Configuration For our Starter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"logging.api.enabled"</span>, havingValue = <span class="string">"true"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogMethodExecutionTimeAutoConfiguration</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  LogMethodExecutionTimeAspect <span class="title">getLogMethodExecutionTimeAspect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> LogMethodExecutionTimeAspect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   </p><h4 id="spring-factories-File"><a href="#spring-factories-File" class="headerlink" title="spring.factories File"></a>spring.factories File</h4><p>We need to create special file called as <code>spring.factories</code>. Our custom starter to be pick by Spring boot, we have to create spring.factories. This file should be placed within the src/main/resources/META-INF folder. This file has list of all classes annotated with <code>@Configuration</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">ns.aop.LogMethodExecutionTimeAutoConfiguration                           </span><br></pre></td></tr></table></figure></p><p><strong>Note Naming Convention</strong><br>You should make sure to provide a proper namespace for your starter. Do not start your module names with spring-boot, even if you use a different Maven groupId.<br>As a rule of thumb, you should name a combined module after the starter. For example, assume that you are creating a starter for “acme” and that you name the auto-configure module acme-spring-boot-autoconfigure and the starter acme-spring-boot-starter. If you only have one module that combines the two, name it acme-spring-boot-starter.</p><h4 id="Using-the-custom-starter"><a href="#Using-the-custom-starter" class="headerlink" title="Using the custom starter"></a>Using the custom starter</h4><p>Let’s create a sample Spring Boot application <code>client</code> to use our custom starter.<br><figure class="highlight java"><figcaption><span>Client</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ns&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;method-execution-time-logging-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define below property </span></span><br><span class="line">logging.api.enabled=<span class="keyword">true</span></span><br><span class="line"><span class="comment">//Main Class</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">ApplicationRunner <span class="title">init</span><span class="params">(TestClass testClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (ApplicationArguments args) -&gt;  dataSetup(testClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dataSetup</span><span class="params">(TestClass testClass)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">testClass.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Test Class</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@LogMethodExecutionTime</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>The code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-boot-starter.git" target="_blank" rel="noopener">here</a>.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Now days Spring Boot has become de facto standard for numerous Web enterprise developments. Spring Boot helps to improve developer’s prod
      
    
    </summary>
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Boot Starter" scheme="https://nirajsonawane.github.io/tags/Spring-Boot-Starter/"/>
    
      <category term="AOP" scheme="https://nirajsonawane.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>My AWS Solutions Architect Associate Certification Preparation Guide</title>
    <link href="https://nirajsonawane.github.io/2019/09/13/My-AWS-Certified-Solutions-Architect-Associate-Certification-Preparation-Guide/"/>
    <id>https://nirajsonawane.github.io/2019/09/13/My-AWS-Certified-Solutions-Architect-Associate-Certification-Preparation-Guide/</id>
    <published>2019-09-13T05:53:58.000Z</published>
    <updated>2019-09-26T16:23:00.258Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/09/13/My-AWS-Certified-Solutions-Architect-Associate-Certification-Preparation-Guide/aws.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@benwhitephotography?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Ben White"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Ben White</span></a></p><p>I Recently [September 2019 ] Completed AWS Architect Associate Certification in First Attempt with score of 89%. I want to share my experience and exam preparation tips with you.</p><h3 id="My-Background-about-AWS-and-Cloud-Technologies"><a href="#My-Background-about-AWS-and-Cloud-Technologies" class="headerlink" title="My Background about AWS and Cloud Technologies"></a>My Background about AWS and Cloud Technologies</h3><p>I had No prior AWS experience or knowledge. But I had previous work experience in Other <em>IaaS</em> Platform. I was well aware about the most of the cloud concepts covered in Exam. It was easy for me to relate the problem and Pain point Any AWS Service was trying to Solve. I think this is very important to understand any AWS Service and motivation behind creating such service. This helped me to understand bigger picture.      </p><h3 id="Preparation-Timeline"><a href="#Preparation-Timeline" class="headerlink" title="Preparation Timeline"></a>Preparation Timeline</h3><p>AWS suggest you should have minimum One year of working experience on AWS Platform but it’s not mandatory. When i did my research, Most of the people recommending at lest Three to Four months of study (2 -3 hrs everyday). It’s obvious we cannot generalize this. It depends on individual.</p><p> <strong>Please take your time to study and do not rush and Book the Exam. Give yourself enough time</strong>  The platform has more than 140 different services and new services are launching every day. It can be very overwhelming and time consuming trying to understand Services. Architect Associate exam does not cover all Services but it still covers lot.<br>I Personally made mistake by booking exam in advance, Giving myself only three weeks of time for preparation along with my Office work of 8-9 hrs. For last few days i have to push myself to cover all services.</p><h3 id="Preparation-Resources"><a href="#Preparation-Resources" class="headerlink" title="Preparation Resources"></a>Preparation Resources</h3><p>I Use <em>Udemy</em> Platform for my regular study, For AWS I took below courses from Udemy.</p><p> <strong><a href="https://www.udemy.com/aws-certified-solutions-architect-associate/" target="_blank" rel="noopener">AWS Certified Solutions Architect - Associate 2019. By Ryan Kroonenburg, Faye Ellis</a></strong><br>This is one of the most popular course for CSAA Certification. Content of course is very good and up to date. I will surely recommend this course.<br><strong>I have rated this course as 4.5 Star on Udemy</strong>  </p><p><strong><a href="https://www.udemy.com/aws-certified-solutions-architect-associate-saa-c01/" target="_blank" rel="noopener">Ultimate AWS Certified Solutions Architect Associate 2019 by Stephane Maarek</a></strong><br>This is also another very good course. This course provide more details and hands on compare to Ryan course. This was my primary source for preparation.<br>I will definitely recommend this course. <strong>I have rated this course as 5 Star on Udemy</strong>  </p><p>**I would Suggest do not rely on any Single Course. Complete at lest two courses of your choice.</p><p><strong>Practice Exams</strong><br>Practice Exams are equally Important. I Used below two practice exams. All Exam questions are scenario based, So it’s become very important to prepare your self for such questions. Both the below Practice Exams includes 6 Practice Tests and quality of question is also good. Real Exam also has similar (But Not exact same) questions. <strong>I have rated both these course as 5 Star on Udemy</strong>     </p><p>You might not do well in these practice exams. Read the explanation about the answers and repeat the the test again. Due to limited time i was not able to repeat the test.  </p><p><strong><a href="https://www.udemy.com/course/aws-certified-solutions-architect-associate-practice-tests-k/" target="_blank" rel="noopener">AWS Certified Solutions Architect Associate Practice Exams by Neal Davis, Digital Cloud Training</a></strong><br>My First Attempt Scores in Test exams 46%,49%,60%,76%,53%,63%. <strong>I Was able to pass only 1 Test in my First Attempt</strong> </p><p><strong><a href="https://www.udemy.com/aws-certified-solutions-architect-associate-amazon-practice-exams/" target="_blank" rel="noopener">AWS Certified Solutions Architect Associate Practice Exams By by Jon Bonso, Tutorials Dojo</a></strong><br>My First Attempt Scores in Test exams 75%,75%,68%,80%,86%,75%.  I took these test at last.</p><p><strong>FAQ &amp; Whitepaper</strong><br>It is Suggested that You should go through FAQ and White Papers before appearing to exam. I haven’t got time to read any White Papers or FAQ      </p><h3 id="Preparation-And-Exam-Tips"><a href="#Preparation-And-Exam-Tips" class="headerlink" title="Preparation And Exam Tips"></a>Preparation And Exam Tips</h3><p>These are not some magical Tips and you must be knowing most of these. Just make sure you check all the boxes.   </p><p><strong>Hands on using Free tier</strong> Do not start you preparation considering exam in mind. Do hands on whenever possible and consider it as you are implementing it for any enterprise level application. Exam will test you for such scenario only.</p><p><strong>Taking Note</strong> Start taking your notes as soon as possible. Exam covers lot of topics and it’s difficult to remember all stuff. Video tutorial needs lot of time and you might not able to repeat.</p><p><strong>Read questions carefully and Take your Time to Understand it</strong> Most of the questions are Descriptive and are up to 3 lines . Try to <strong>Find Keywords like Cost effective,Manage Service, Minimum Configurations,Availability, Durability etc</strong>  Keywords will help to select Most appropriate Option. <strong>First Try to Eliminate Wrong Answer rather than finding correct one</strong></p><p><strong>VPC is Very Important</strong><br>VPC is very important from Exam point of view and i got lot of question about VPC.You need to understand  which service should be in a public subnet versus a private subnets And How Services deployed in Private subnets can interact with Internet and other services. </p><p><strong>Disaster recovery</strong><br>Disaster recovery also covers good portion of exam. Try to Understand  and memorize how each services works in case of failure, And How to configure services for Disaster recovery.<br>E.g  Does the service backups data, Where it copies, is it automatic or we need to configure it, How failover works etc.</p><h3 id="Reality-Check-After-Certification"><a href="#Reality-Check-After-Certification" class="headerlink" title="Reality Check After Certification"></a>Reality Check After Certification</h3><p>Does it mean I am now great cloud architect after Certification?  Of course not :)<br>The real word Enterprise application Brings lof of complexity and different unknown challenges and No exam can test these scenarios.</p><p>It’s very important to keep ourself updated with stuff happening around technology space. Any Certification can give me an edge over other candidates While getting job or Can Help me to get better salary But it does not guarantee that I Will be able to solve the Problem.  </p><p>I want to become good software architect and getting any such certification is <strong>Just the one Step Forward.</strong>  </p><p>Please let me know about your AWS Exam experience and Any tips that  you want to share.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/09/13/My-AWS-Certified-Solutions-Architect-Associate-Certification-Preparation-Guide/aws.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://nirajsonawane.github.io/tags/AWS/"/>
    
  </entry>
  
</feed>
